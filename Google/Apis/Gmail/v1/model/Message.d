/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Gmail.v1.Data.Message;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Gmail.v1.GmailMyNullable;

import Google.Apis.Gmail.v1.Data.MessagePart;

/**
 * An email message.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Gmail API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct Message {

  /**
   * The ID of the last history record that modified this message.
   * The value may be {@code null}.
   */
  @optional public MyNullable!ulong _historyId;

  /**
   * The immutable ID of the message.
   * The value may be {@code null}.
   */
  @optional public string _id;

  /**
   * The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For
   * normal SMTP-received email, this represents the time the message was originally accepted by
   * Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can
   * be configured by client to be based on the `Date` header.
   * The value may be {@code null}.
   */
  @optional public MyNullable!long _internalDate;

  /**
   * List of IDs of labels applied to this message.
   * The value may be {@code null}.
   */
  @optional public string[] _labelIds;

  /**
   * The parsed email structure in the message parts.
   * The value may be {@code null}.
   */
  @optional public MessagePart _payload;

  /**
   * The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in
   * `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.
   * The value may be {@code null}.
   */
  @optional public string _raw;

  /**
   * Estimated size in bytes of the message.
   * The value may be {@code null}.
   */
  @optional public Nullable!int _sizeEstimate;

  /**
   * A short part of the message text.
   * The value may be {@code null}.
   */
  @optional public string _snippet;

  /**
   * The ID of the thread the message belongs to. To add a message or draft to a thread, the
   * following criteria must be met: 1. The requested `threadId` must be specified on the `Message`
   * or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers
   * must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3.
   * The `Subject` headers must match.
   * The value may be {@code null}.
   */
  @optional public string _threadId;

  /**
   * The ID of the last history record that modified this message.
   * @return value or {@code null} for none
   */
  public MyNullable!ulong getHistoryId() {
    return _historyId;
  }
  /**
   * The ID of the last history record that modified this message.
   * @param historyId historyId or {@code null} for none
   */
  public Message setHistoryId(MyNullable!ulong _historyId) {
    this._historyId = _historyId;
    return this;
  }

  /**
   * The immutable ID of the message.
   * @return value or {@code null} for none
   */
  public string getId() {
    return _id;
  }
  /**
   * The immutable ID of the message.
   * @param id id or {@code null} for none
   */
  public Message setId(string _id) {
    this._id = _id;
    return this;
  }

  /**
   * The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For
   * normal SMTP-received email, this represents the time the message was originally accepted by
   * Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can
   * be configured by client to be based on the `Date` header.
   * @return value or {@code null} for none
   */
  public MyNullable!long getInternalDate() {
    return _internalDate;
  }
  /**
   * The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For
   * normal SMTP-received email, this represents the time the message was originally accepted by
   * Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can
   * be configured by client to be based on the `Date` header.
   * @param internalDate internalDate or {@code null} for none
   */
  public Message setInternalDate(MyNullable!long _internalDate) {
    this._internalDate = _internalDate;
    return this;
  }

  /**
   * List of IDs of labels applied to this message.
   * @return value or {@code null} for none
   */
  public string[] getLabelIds() {
    return _labelIds;
  }
  /**
   * List of IDs of labels applied to this message.
   * @param labelIds labelIds or {@code null} for none
   */
  public Message setLabelIds(string[] _labelIds) {
    this._labelIds = _labelIds;
    return this;
  }

  /**
   * The parsed email structure in the message parts.
   * @return value or {@code null} for none
   */
  public MessagePart getPayload() {
    return _payload;
  }
  /**
   * The parsed email structure in the message parts.
   * @param payload payload or {@code null} for none
   */
  public Message setPayload(MessagePart _payload) {
    this._payload = _payload;
    return this;
  }

  /**
   * The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in
   * `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.
   * @return value or {@code null} for none
   */
  public string getRaw() {
    return _raw;
  }
  /**
   * The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in
   * `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.
   * @see #encodeRaw()
   * @param raw raw or {@code null} for none
   */
  public Message setRaw(string _raw) {
    this._raw = _raw;
    return this;
  }

  /**
   * The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in
   * `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.
   * @see #setRaw()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public Message encodeRaw(byte[] raw) {
    import std.conv: to;
    this._raw = to!(string)(raw);
    return this;
  }

  /**
   * Estimated size in bytes of the message.
   * @return value or {@code null} for none
   */
  public Nullable!int getSizeEstimate() {
    return _sizeEstimate;
  }
  /**
   * Estimated size in bytes of the message.
   * @param sizeEstimate sizeEstimate or {@code null} for none
   */
  public Message setSizeEstimate(Nullable!int _sizeEstimate) {
    this._sizeEstimate = _sizeEstimate;
    return this;
  }

  /**
   * A short part of the message text.
   * @return value or {@code null} for none
   */
  public string getSnippet() {
    return _snippet;
  }
  /**
   * A short part of the message text.
   * @param snippet snippet or {@code null} for none
   */
  public Message setSnippet(string _snippet) {
    this._snippet = _snippet;
    return this;
  }

  /**
   * The ID of the thread the message belongs to. To add a message or draft to a thread, the
   * following criteria must be met: 1. The requested `threadId` must be specified on the `Message`
   * or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers
   * must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3.
   * The `Subject` headers must match.
   * @return value or {@code null} for none
   */
  public string getThreadId() {
    return _threadId;
  }
  /**
   * The ID of the thread the message belongs to. To add a message or draft to a thread, the
   * following criteria must be met: 1. The requested `threadId` must be specified on the `Message`
   * or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers
   * must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3.
   * The `Subject` headers must match.
   * @param threadId threadId or {@code null} for none
   */
  public Message setThreadId(string _threadId) {
    this._threadId = _threadId;
    return this;
  }

}