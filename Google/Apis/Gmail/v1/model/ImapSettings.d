/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Gmail.v1.Data.ImapSettings;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Gmail.v1.GmailMyNullable;

/**
 * IMAP settings for an account.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Gmail API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct ImapSettings {

  /**
   * If this value is true, Gmail will immediately expunge a message when it is marked as deleted in
   * IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked
   * as deleted.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _autoExpunge;

  /**
   * Whether IMAP is enabled for the account.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _enabled;

  /**
   * The action that will be executed on a message when it is marked as deleted and expunged from
   * the last visible IMAP folder.
   * The value may be {@code null}.
   */
  @optional public string _expungeBehavior;

  /**
   * An optional limit on the number of messages that an IMAP folder may contain. Legal values are
   * 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
   * The value may be {@code null}.
   */
  @optional public Nullable!int _maxFolderSize;

  /**
   * If this value is true, Gmail will immediately expunge a message when it is marked as deleted in
   * IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked
   * as deleted.
   * @return value or {@code null} for none
   */
  public Nullable!bool getAutoExpunge() {
    return _autoExpunge;
  }
  /**
   * If this value is true, Gmail will immediately expunge a message when it is marked as deleted in
   * IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked
   * as deleted.
   * @param autoExpunge autoExpunge or {@code null} for none
   */
  public ImapSettings setAutoExpunge(Nullable!bool _autoExpunge) {
    this._autoExpunge = _autoExpunge;
    return this;
  }

  /**
   * Whether IMAP is enabled for the account.
   * @return value or {@code null} for none
   */
  public Nullable!bool getEnabled() {
    return _enabled;
  }
  /**
   * Whether IMAP is enabled for the account.
   * @param enabled enabled or {@code null} for none
   */
  public ImapSettings setEnabled(Nullable!bool _enabled) {
    this._enabled = _enabled;
    return this;
  }

  /**
   * The action that will be executed on a message when it is marked as deleted and expunged from
   * the last visible IMAP folder.
   * @return value or {@code null} for none
   */
  public string getExpungeBehavior() {
    return _expungeBehavior;
  }
  /**
   * The action that will be executed on a message when it is marked as deleted and expunged from
   * the last visible IMAP folder.
   * @param expungeBehavior expungeBehavior or {@code null} for none
   */
  public ImapSettings setExpungeBehavior(string _expungeBehavior) {
    this._expungeBehavior = _expungeBehavior;
    return this;
  }

  /**
   * An optional limit on the number of messages that an IMAP folder may contain. Legal values are
   * 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
   * @return value or {@code null} for none
   */
  public Nullable!int getMaxFolderSize() {
    return _maxFolderSize;
  }
  /**
   * An optional limit on the number of messages that an IMAP folder may contain. Legal values are
   * 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
   * @param maxFolderSize maxFolderSize or {@code null} for none
   */
  public ImapSettings setMaxFolderSize(Nullable!int _maxFolderSize) {
    this._maxFolderSize = _maxFolderSize;
    return this;
  }

}