/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Gmail.v1.Data.MessagePart;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Gmail.v1.GmailMyNullable;

import Google.Apis.Gmail.v1.Data.MessagePartBody;
import Google.Apis.Gmail.v1.Data.MessagePartHeader;
import Google.Apis.Gmail.v1.Data.MessagePart;

/**
 * A single MIME message part.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Gmail API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct MessagePart {

  /**
   * The message part body for this part, which may be empty for container MIME message parts.
   * The value may be {@code null}.
   */
  @optional public MessagePartBody _body;

  /**
   * The filename of the attachment. Only present if this message part represents an attachment.
   * The value may be {@code null}.
   */
  @optional public string _filename;

  /**
   * List of headers on this message part. For the top-level message part, representing the entire
   * message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and
   * `Subject`.
   * The value may be {@code null}.
   */
  @optional public MessagePartHeader[] _headers;

  /**
   * The MIME type of the message part.
   * The value may be {@code null}.
   */
  @optional public string _mimeType;

  /**
   * The immutable ID of the message part.
   * The value may be {@code null}.
   */
  @optional public string _partId;

  /**
   * The child MIME message parts of this part. This only applies to container MIME message parts,
   * for example `multipart`. For non- container MIME message part types, such as `text/plain`, this
   * field is empty. For more information, see RFC 1521.
   * The value may be {@code null}.
   */
  @optional public MessagePart[] _parts;

  /**
   * The message part body for this part, which may be empty for container MIME message parts.
   * @return value or {@code null} for none
   */
  public MessagePartBody getBody() {
    return _body;
  }
  /**
   * The message part body for this part, which may be empty for container MIME message parts.
   * @param body body or {@code null} for none
   */
  public MessagePart setBody(MessagePartBody _body) {
    this._body = _body;
    return this;
  }

  /**
   * The filename of the attachment. Only present if this message part represents an attachment.
   * @return value or {@code null} for none
   */
  public string getFilename() {
    return _filename;
  }
  /**
   * The filename of the attachment. Only present if this message part represents an attachment.
   * @param filename filename or {@code null} for none
   */
  public MessagePart setFilename(string _filename) {
    this._filename = _filename;
    return this;
  }

  /**
   * List of headers on this message part. For the top-level message part, representing the entire
   * message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and
   * `Subject`.
   * @return value or {@code null} for none
   */
  public MessagePartHeader[] getHeaders() {
    return _headers;
  }
  /**
   * List of headers on this message part. For the top-level message part, representing the entire
   * message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and
   * `Subject`.
   * @param headers headers or {@code null} for none
   */
  public MessagePart setHeaders(MessagePartHeader[] _headers) {
    this._headers = _headers;
    return this;
  }

  /**
   * The MIME type of the message part.
   * @return value or {@code null} for none
   */
  public string getMimeType() {
    return _mimeType;
  }
  /**
   * The MIME type of the message part.
   * @param mimeType mimeType or {@code null} for none
   */
  public MessagePart setMimeType(string _mimeType) {
    this._mimeType = _mimeType;
    return this;
  }

  /**
   * The immutable ID of the message part.
   * @return value or {@code null} for none
   */
  public string getPartId() {
    return _partId;
  }
  /**
   * The immutable ID of the message part.
   * @param partId partId or {@code null} for none
   */
  public MessagePart setPartId(string _partId) {
    this._partId = _partId;
    return this;
  }

  /**
   * The child MIME message parts of this part. This only applies to container MIME message parts,
   * for example `multipart`. For non- container MIME message part types, such as `text/plain`, this
   * field is empty. For more information, see RFC 1521.
   * @return value or {@code null} for none
   */
  public MessagePart[] getParts() {
    return _parts;
  }
  /**
   * The child MIME message parts of this part. This only applies to container MIME message parts,
   * for example `multipart`. For non- container MIME message part types, such as `text/plain`, this
   * field is empty. For more information, see RFC 1521.
   * @param parts parts or {@code null} for none
   */
  public MessagePart setParts(MessagePart[] _parts) {
    this._parts = _parts;
    return this;
  }

}