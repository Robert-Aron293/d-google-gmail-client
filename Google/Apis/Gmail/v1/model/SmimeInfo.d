/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Gmail.v1.Data.SmimeInfo;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Gmail.v1.GmailMyNullable;

/**
 * An S/MIME email config.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Gmail API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct SmimeInfo {

  /**
   * Encrypted key password, when key is encrypted.
   * The value may be {@code null}.
   */
  @optional public string _encryptedKeyPassword;

  /**
   * When the certificate expires (in milliseconds since epoch).
   * The value may be {@code null}.
   */
  @optional public MyNullable!long _expiration;

  /**
   * The immutable ID for the SmimeInfo.
   * The value may be {@code null}.
   */
  @optional public string _id;

  /**
   * Whether this SmimeInfo is the default one for this user's send-as address.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _isDefault;

  /**
   * The S/MIME certificate issuer's common name.
   * The value may be {@code null}.
   */
  @optional public string _issuerCn;

  /**
   * PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for
   * returning key, which includes public key as well as certificate chain (not private key).
   * The value may be {@code null}.
   */
  @optional public string _pem;

  /**
   * PKCS#12 format containing a single private/public key pair and certificate chain. This format
   * is only accepted from client for creating a new SmimeInfo and is never returned, because the
   * private key is not intended to be exported. PKCS#12 may be encrypted, in which case
   * encryptedKeyPassword should be set appropriately.
   * The value may be {@code null}.
   */
  @optional public string _pkcs12;

  /**
   * Encrypted key password, when key is encrypted.
   * @return value or {@code null} for none
   */
  public string getEncryptedKeyPassword() {
    return _encryptedKeyPassword;
  }
  /**
   * Encrypted key password, when key is encrypted.
   * @param encryptedKeyPassword encryptedKeyPassword or {@code null} for none
   */
  public SmimeInfo setEncryptedKeyPassword(string _encryptedKeyPassword) {
    this._encryptedKeyPassword = _encryptedKeyPassword;
    return this;
  }

  /**
   * When the certificate expires (in milliseconds since epoch).
   * @return value or {@code null} for none
   */
  public MyNullable!long getExpiration() {
    return _expiration;
  }
  /**
   * When the certificate expires (in milliseconds since epoch).
   * @param expiration expiration or {@code null} for none
   */
  public SmimeInfo setExpiration(MyNullable!long _expiration) {
    this._expiration = _expiration;
    return this;
  }

  /**
   * The immutable ID for the SmimeInfo.
   * @return value or {@code null} for none
   */
  public string getId() {
    return _id;
  }
  /**
   * The immutable ID for the SmimeInfo.
   * @param id id or {@code null} for none
   */
  public SmimeInfo setId(string _id) {
    this._id = _id;
    return this;
  }

  /**
   * Whether this SmimeInfo is the default one for this user's send-as address.
   * @return value or {@code null} for none
   */
  public Nullable!bool getIsDefault() {
    return _isDefault;
  }
  /**
   * Whether this SmimeInfo is the default one for this user's send-as address.
   * @param isDefault isDefault or {@code null} for none
   */
  public SmimeInfo setIsDefault(Nullable!bool _isDefault) {
    this._isDefault = _isDefault;
    return this;
  }

  /**
   * The S/MIME certificate issuer's common name.
   * @return value or {@code null} for none
   */
  public string getIssuerCn() {
    return _issuerCn;
  }
  /**
   * The S/MIME certificate issuer's common name.
   * @param issuerCn issuerCn or {@code null} for none
   */
  public SmimeInfo setIssuerCn(string _issuerCn) {
    this._issuerCn = _issuerCn;
    return this;
  }

  /**
   * PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for
   * returning key, which includes public key as well as certificate chain (not private key).
   * @return value or {@code null} for none
   */
  public string getPem() {
    return _pem;
  }
  /**
   * PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for
   * returning key, which includes public key as well as certificate chain (not private key).
   * @param pem pem or {@code null} for none
   */
  public SmimeInfo setPem(string _pem) {
    this._pem = _pem;
    return this;
  }

  /**
   * PKCS#12 format containing a single private/public key pair and certificate chain. This format
   * is only accepted from client for creating a new SmimeInfo and is never returned, because the
   * private key is not intended to be exported. PKCS#12 may be encrypted, in which case
   * encryptedKeyPassword should be set appropriately.
   * @return value or {@code null} for none
   */
  public string getPkcs12() {
    return _pkcs12;
  }
  /**
   * PKCS#12 format containing a single private/public key pair and certificate chain. This format
   * is only accepted from client for creating a new SmimeInfo and is never returned, because the
   * private key is not intended to be exported. PKCS#12 may be encrypted, in which case
   * encryptedKeyPassword should be set appropriately.
   * @see #encodePkcs12()
   * @param pkcs12 pkcs12 or {@code null} for none
   */
  public SmimeInfo setPkcs12(string _pkcs12) {
    this._pkcs12 = _pkcs12;
    return this;
  }

  /**
   * PKCS#12 format containing a single private/public key pair and certificate chain. This format
   * is only accepted from client for creating a new SmimeInfo and is never returned, because the
   * private key is not intended to be exported. PKCS#12 may be encrypted, in which case
   * encryptedKeyPassword should be set appropriately.
   * @see #setPkcs12()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public SmimeInfo encodePkcs12(byte[] pkcs12) {
    import std.conv: to;
    this._pkcs12 = to!(string)(pkcs12);
    return this;
  }

}