/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Gmail.v1.Data.WatchRequest;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Gmail.v1.GmailMyNullable;

/**
 * Set up or update a new push notification watch on this user's mailbox.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Gmail API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct WatchRequest {

  /**
   * Filtering behavior of labelIds list specified.
   * The value may be {@code null}.
   */
  @optional public string _labelFilterAction;

  /**
   * List of label_ids to restrict notifications about. By default, if unspecified, all changes are
   * pushed out. If specified then dictates which labels are required for a push notification to be
   * generated.
   * The value may be {@code null}.
   */
  @optional public string[] _labelIds;

  /**
   * A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name
   * **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail "publish"
   * permission on it. For example, "projects/my-project-identifier/topics/my-topic-name" (using the
   * Cloud Pub/Sub "v1" topic naming format). Note that the "my-project-identifier" portion must
   * exactly match your Google developer project id (the one executing this watch request).
   * The value may be {@code null}.
   */
  @optional public string _topicName;

  /**
   * Filtering behavior of labelIds list specified.
   * @return value or {@code null} for none
   */
  public string getLabelFilterAction() {
    return _labelFilterAction;
  }
  /**
   * Filtering behavior of labelIds list specified.
   * @param labelFilterAction labelFilterAction or {@code null} for none
   */
  public WatchRequest setLabelFilterAction(string _labelFilterAction) {
    this._labelFilterAction = _labelFilterAction;
    return this;
  }

  /**
   * List of label_ids to restrict notifications about. By default, if unspecified, all changes are
   * pushed out. If specified then dictates which labels are required for a push notification to be
   * generated.
   * @return value or {@code null} for none
   */
  public string[] getLabelIds() {
    return _labelIds;
  }
  /**
   * List of label_ids to restrict notifications about. By default, if unspecified, all changes are
   * pushed out. If specified then dictates which labels are required for a push notification to be
   * generated.
   * @param labelIds labelIds or {@code null} for none
   */
  public WatchRequest setLabelIds(string[] _labelIds) {
    this._labelIds = _labelIds;
    return this;
  }

  /**
   * A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name
   * **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail "publish"
   * permission on it. For example, "projects/my-project-identifier/topics/my-topic-name" (using the
   * Cloud Pub/Sub "v1" topic naming format). Note that the "my-project-identifier" portion must
   * exactly match your Google developer project id (the one executing this watch request).
   * @return value or {@code null} for none
   */
  public string getTopicName() {
    return _topicName;
  }
  /**
   * A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name
   * **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail "publish"
   * permission on it. For example, "projects/my-project-identifier/topics/my-topic-name" (using the
   * Cloud Pub/Sub "v1" topic naming format). Note that the "my-project-identifier" portion must
   * exactly match your Google developer project id (the one executing this watch request).
   * @param topicName topicName or {@code null} for none
   */
  public WatchRequest setTopicName(string _topicName) {
    this._topicName = _topicName;
    return this;
  }

}