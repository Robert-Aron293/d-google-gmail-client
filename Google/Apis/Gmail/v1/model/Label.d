/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Gmail.v1.Data.Label;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Gmail.v1.GmailMyNullable;

import Google.Apis.Gmail.v1.Data.LabelColor;

/**
 * Labels are used to categorize messages and threads within the user's mailbox. The maximum number
 * of labels supported for a user's mailbox is 10,000.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Gmail API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct Label {

  /**
   * The color to assign to the label. Color is only available for labels that have their `type` set
   * to `user`.
   * The value may be {@code null}.
   */
  @optional public LabelColor _color;

  /**
   * The immutable ID of the label.
   * The value may be {@code null}.
   */
  @optional public string _id;

  /**
   * The visibility of the label in the label list in the Gmail web interface.
   * The value may be {@code null}.
   */
  @optional public string _labelListVisibility;

  /**
   * The visibility of messages with this label in the message list in the Gmail web interface.
   * The value may be {@code null}.
   */
  @optional public string _messageListVisibility;

  /**
   * The total number of messages with the label.
   * The value may be {@code null}.
   */
  @optional public Nullable!int _messagesTotal;

  /**
   * The number of unread messages with the label.
   * The value may be {@code null}.
   */
  @optional public Nullable!int _messagesUnread;

  /**
   * The display name of the label.
   * The value may be {@code null}.
   */
  @optional public string _name;

  /**
   * The total number of threads with the label.
   * The value may be {@code null}.
   */
  @optional public Nullable!int _threadsTotal;

  /**
   * The number of unread threads with the label.
   * The value may be {@code null}.
   */
  @optional public Nullable!int _threadsUnread;

  /**
   * The owner type for the label. User labels are created by the user and can be modified and
   * deleted by the user and can be applied to any message or thread. System labels are internally
   * created and cannot be added, modified, or deleted. System labels may be able to be applied to
   * or removed from messages and threads under some circumstances but this is not guaranteed. For
   * example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads,
   * but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
   * The value may be {@code null}.
   */
  @optional public string _type;

  /**
   * The color to assign to the label. Color is only available for labels that have their `type` set
   * to `user`.
   * @return value or {@code null} for none
   */
  public LabelColor getColor() {
    return _color;
  }
  /**
   * The color to assign to the label. Color is only available for labels that have their `type` set
   * to `user`.
   * @param color color or {@code null} for none
   */
  public Label setColor(LabelColor _color) {
    this._color = _color;
    return this;
  }

  /**
   * The immutable ID of the label.
   * @return value or {@code null} for none
   */
  public string getId() {
    return _id;
  }
  /**
   * The immutable ID of the label.
   * @param id id or {@code null} for none
   */
  public Label setId(string _id) {
    this._id = _id;
    return this;
  }

  /**
   * The visibility of the label in the label list in the Gmail web interface.
   * @return value or {@code null} for none
   */
  public string getLabelListVisibility() {
    return _labelListVisibility;
  }
  /**
   * The visibility of the label in the label list in the Gmail web interface.
   * @param labelListVisibility labelListVisibility or {@code null} for none
   */
  public Label setLabelListVisibility(string _labelListVisibility) {
    this._labelListVisibility = _labelListVisibility;
    return this;
  }

  /**
   * The visibility of messages with this label in the message list in the Gmail web interface.
   * @return value or {@code null} for none
   */
  public string getMessageListVisibility() {
    return _messageListVisibility;
  }
  /**
   * The visibility of messages with this label in the message list in the Gmail web interface.
   * @param messageListVisibility messageListVisibility or {@code null} for none
   */
  public Label setMessageListVisibility(string _messageListVisibility) {
    this._messageListVisibility = _messageListVisibility;
    return this;
  }

  /**
   * The total number of messages with the label.
   * @return value or {@code null} for none
   */
  public Nullable!int getMessagesTotal() {
    return _messagesTotal;
  }
  /**
   * The total number of messages with the label.
   * @param messagesTotal messagesTotal or {@code null} for none
   */
  public Label setMessagesTotal(Nullable!int _messagesTotal) {
    this._messagesTotal = _messagesTotal;
    return this;
  }

  /**
   * The number of unread messages with the label.
   * @return value or {@code null} for none
   */
  public Nullable!int getMessagesUnread() {
    return _messagesUnread;
  }
  /**
   * The number of unread messages with the label.
   * @param messagesUnread messagesUnread or {@code null} for none
   */
  public Label setMessagesUnread(Nullable!int _messagesUnread) {
    this._messagesUnread = _messagesUnread;
    return this;
  }

  /**
   * The display name of the label.
   * @return value or {@code null} for none
   */
  public string getName() {
    return _name;
  }
  /**
   * The display name of the label.
   * @param name name or {@code null} for none
   */
  public Label setName(string _name) {
    this._name = _name;
    return this;
  }

  /**
   * The total number of threads with the label.
   * @return value or {@code null} for none
   */
  public Nullable!int getThreadsTotal() {
    return _threadsTotal;
  }
  /**
   * The total number of threads with the label.
   * @param threadsTotal threadsTotal or {@code null} for none
   */
  public Label setThreadsTotal(Nullable!int _threadsTotal) {
    this._threadsTotal = _threadsTotal;
    return this;
  }

  /**
   * The number of unread threads with the label.
   * @return value or {@code null} for none
   */
  public Nullable!int getThreadsUnread() {
    return _threadsUnread;
  }
  /**
   * The number of unread threads with the label.
   * @param threadsUnread threadsUnread or {@code null} for none
   */
  public Label setThreadsUnread(Nullable!int _threadsUnread) {
    this._threadsUnread = _threadsUnread;
    return this;
  }

  /**
   * The owner type for the label. User labels are created by the user and can be modified and
   * deleted by the user and can be applied to any message or thread. System labels are internally
   * created and cannot be added, modified, or deleted. System labels may be able to be applied to
   * or removed from messages and threads under some circumstances but this is not guaranteed. For
   * example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads,
   * but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
   * @return value or {@code null} for none
   */
  public string getType() {
    return _type;
  }
  /**
   * The owner type for the label. User labels are created by the user and can be modified and
   * deleted by the user and can be applied to any message or thread. System labels are internally
   * created and cannot be added, modified, or deleted. System labels may be able to be applied to
   * or removed from messages and threads under some circumstances but this is not guaranteed. For
   * example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads,
   * but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
   * @param type type or {@code null} for none
   */
  public Label setType(string _type) {
    this._type = _type;
    return this;
  }

}