/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Gmail.v1.Data.FilterCriteria;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Gmail.v1.GmailMyNullable;

/**
 * Message matching criteria.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Gmail API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct FilterCriteria {

  /**
   * Whether the response should exclude chats.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _excludeChats;

  /**
   * The sender's display name or email address.
   * The value may be {@code null}.
   */
  @optional public string _from;

  /**
   * Whether the message has any attachment.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _hasAttachment;

  /**
   * Only return messages not matching the specified query. Supports the same query format as the
   * Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
   * The value may be {@code null}.
   */
  @optional public string _negatedQuery;

  /**
   * Only return messages matching the specified query. Supports the same query format as the Gmail
   * search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
   * The value may be {@code null}.
   */
  @optional public string _query;

  /**
   * The size of the entire RFC822 message in bytes, including all headers and attachments.
   * The value may be {@code null}.
   */
  @optional public Nullable!int _size;

  /**
   * How the message size in bytes should be in relation to the size field.
   * The value may be {@code null}.
   */
  @optional public string _sizeComparison;

  /**
   * Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be
   * trimmed and adjacent spaces are collapsed.
   * The value may be {@code null}.
   */
  @optional public string _subject;

  /**
   * The recipient's display name or email address. Includes recipients in the "to", "cc", and "bcc"
   * header fields. You can use simply the local part of the email address. For example, "example"
   * and "example@" both match "example@gmail.com". This field is case-insensitive.
   * The value may be {@code null}.
   */
  @optional public string _to;

  /**
   * Whether the response should exclude chats.
   * @return value or {@code null} for none
   */
  public Nullable!bool getExcludeChats() {
    return _excludeChats;
  }
  /**
   * Whether the response should exclude chats.
   * @param excludeChats excludeChats or {@code null} for none
   */
  public FilterCriteria setExcludeChats(Nullable!bool _excludeChats) {
    this._excludeChats = _excludeChats;
    return this;
  }

  /**
   * The sender's display name or email address.
   * @return value or {@code null} for none
   */
  public string getFrom() {
    return _from;
  }
  /**
   * The sender's display name or email address.
   * @param from from or {@code null} for none
   */
  public FilterCriteria setFrom(string _from) {
    this._from = _from;
    return this;
  }

  /**
   * Whether the message has any attachment.
   * @return value or {@code null} for none
   */
  public Nullable!bool getHasAttachment() {
    return _hasAttachment;
  }
  /**
   * Whether the message has any attachment.
   * @param hasAttachment hasAttachment or {@code null} for none
   */
  public FilterCriteria setHasAttachment(Nullable!bool _hasAttachment) {
    this._hasAttachment = _hasAttachment;
    return this;
  }

  /**
   * Only return messages not matching the specified query. Supports the same query format as the
   * Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
   * @return value or {@code null} for none
   */
  public string getNegatedQuery() {
    return _negatedQuery;
  }
  /**
   * Only return messages not matching the specified query. Supports the same query format as the
   * Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
   * @param negatedQuery negatedQuery or {@code null} for none
   */
  public FilterCriteria setNegatedQuery(string _negatedQuery) {
    this._negatedQuery = _negatedQuery;
    return this;
  }

  /**
   * Only return messages matching the specified query. Supports the same query format as the Gmail
   * search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
   * @return value or {@code null} for none
   */
  public string getQuery() {
    return _query;
  }
  /**
   * Only return messages matching the specified query. Supports the same query format as the Gmail
   * search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
   * @param query query or {@code null} for none
   */
  public FilterCriteria setQuery(string _query) {
    this._query = _query;
    return this;
  }

  /**
   * The size of the entire RFC822 message in bytes, including all headers and attachments.
   * @return value or {@code null} for none
   */
  public Nullable!int getSize() {
    return _size;
  }
  /**
   * The size of the entire RFC822 message in bytes, including all headers and attachments.
   * @param size size or {@code null} for none
   */
  public FilterCriteria setSize(Nullable!int _size) {
    this._size = _size;
    return this;
  }

  /**
   * How the message size in bytes should be in relation to the size field.
   * @return value or {@code null} for none
   */
  public string getSizeComparison() {
    return _sizeComparison;
  }
  /**
   * How the message size in bytes should be in relation to the size field.
   * @param sizeComparison sizeComparison or {@code null} for none
   */
  public FilterCriteria setSizeComparison(string _sizeComparison) {
    this._sizeComparison = _sizeComparison;
    return this;
  }

  /**
   * Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be
   * trimmed and adjacent spaces are collapsed.
   * @return value or {@code null} for none
   */
  public string getSubject() {
    return _subject;
  }
  /**
   * Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be
   * trimmed and adjacent spaces are collapsed.
   * @param subject subject or {@code null} for none
   */
  public FilterCriteria setSubject(string _subject) {
    this._subject = _subject;
    return this;
  }

  /**
   * The recipient's display name or email address. Includes recipients in the "to", "cc", and "bcc"
   * header fields. You can use simply the local part of the email address. For example, "example"
   * and "example@" both match "example@gmail.com". This field is case-insensitive.
   * @return value or {@code null} for none
   */
  public string getTo() {
    return _to;
  }
  /**
   * The recipient's display name or email address. Includes recipients in the "to", "cc", and "bcc"
   * header fields. You can use simply the local part of the email address. For example, "example"
   * and "example@" both match "example@gmail.com". This field is case-insensitive.
   * @param to to or {@code null} for none
   */
  public FilterCriteria setTo(string _to) {
    this._to = _to;
    return this;
  }

}