/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Gmail.v1.Gmail;

import Google.Apis.Gmail.v1.Data.AutoForwarding;
import Google.Apis.Gmail.v1.Data.BatchDeleteMessagesRequest;
import Google.Apis.Gmail.v1.Data.BatchModifyMessagesRequest;
import Google.Apis.Gmail.v1.Data.Delegate;
import Google.Apis.Gmail.v1.Data.Draft;
import Google.Apis.Gmail.v1.Data.Filter;
import Google.Apis.Gmail.v1.Data.FilterAction;
import Google.Apis.Gmail.v1.Data.FilterCriteria;
import Google.Apis.Gmail.v1.Data.ForwardingAddress;
import Google.Apis.Gmail.v1.Data.History;
import Google.Apis.Gmail.v1.Data.HistoryLabelAdded;
import Google.Apis.Gmail.v1.Data.HistoryLabelRemoved;
import Google.Apis.Gmail.v1.Data.HistoryMessageAdded;
import Google.Apis.Gmail.v1.Data.HistoryMessageDeleted;
import Google.Apis.Gmail.v1.Data.ImapSettings;
import Google.Apis.Gmail.v1.Data.Label;
import Google.Apis.Gmail.v1.Data.LabelColor;
import Google.Apis.Gmail.v1.Data.LanguageSettings;
import Google.Apis.Gmail.v1.Data.ListDelegatesResponse;
import Google.Apis.Gmail.v1.Data.ListDraftsResponse;
import Google.Apis.Gmail.v1.Data.ListFiltersResponse;
import Google.Apis.Gmail.v1.Data.ListForwardingAddressesResponse;
import Google.Apis.Gmail.v1.Data.ListHistoryResponse;
import Google.Apis.Gmail.v1.Data.ListLabelsResponse;
import Google.Apis.Gmail.v1.Data.ListMessagesResponse;
import Google.Apis.Gmail.v1.Data.ListSendAsResponse;
import Google.Apis.Gmail.v1.Data.ListSmimeInfoResponse;
import Google.Apis.Gmail.v1.Data.ListThreadsResponse;
import Google.Apis.Gmail.v1.Data.Message;
import Google.Apis.Gmail.v1.Data.MessagePart;
import Google.Apis.Gmail.v1.Data.MessagePartBody;
import Google.Apis.Gmail.v1.Data.MessagePartHeader;
import Google.Apis.Gmail.v1.Data.ModifyMessageRequest;
import Google.Apis.Gmail.v1.Data.ModifyThreadRequest;
import Google.Apis.Gmail.v1.Data.PopSettings;
import Google.Apis.Gmail.v1.Data.Profile;
import Google.Apis.Gmail.v1.Data.SendAs;
import Google.Apis.Gmail.v1.Data.SmimeInfo;
import Google.Apis.Gmail.v1.Data.SmtpMsa;
import Google.Apis.Gmail.v1.Data.Thread;
import Google.Apis.Gmail.v1.Data.VacationSettings;
import Google.Apis.Gmail.v1.Data.WatchRequest;
import Google.Apis.Gmail.v1.Data.WatchResponse;

import Google.Apis.Gmail.v1.GmailClient;
import Google.Apis.Gmail.v1.GmailScopes;
import Google.Apis.Gmail.v1.GmailMyNullable: MyNullable;
import Google.Apis.Gmail.v1.GmailRequest: GmailRequest;

import requests;
import std.typecons: Nullable;
import std.exception: enforce;
import std.array: replace;

/**
 * Service definition for Gmail (v1)
 *
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * For more information about this service, see:
 * https://developers.google.com/gmail/api/
 *
 */
public class Gmail {
  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static const string DEFAULT_ROOT_URL = "https://gmail.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   */
   public static const string DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   */
  public static const string DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static const string DEFAULT_BASE_URL = DEFAULT_ROOT_URL ~ DEFAULT_SERVICE_PATH;

  /**
   *
   */
  private GmailClient _client;

  public this(const string credentialsFile, const Scopes _scope) {
    _client = new GmailClient(credentialsFile, _scope);
  }

  /**
   * Authorize a request
   */
  public void initialize
    (RequestT = Request, ResponseT = Response, alias Service)
    (Service!(RequestT, ResponseT) req) {
    req.setOauthToken(_client.getToken);
  }

  public void initialize
    (RequestT = Request, ResponseT = Response, MediaContentType = string, alias Service)
    (Service!(RequestT, ResponseT, MediaContentType) req) {
    req.setOauthToken(_client.getToken);
  }

  /**
   * An accessor for creating requests from the Users collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Gmail gmail = new Gmail(...);}
   *   {@code Gmail.Users.List request = gmail.users().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Users users() {
    return new Users();
  }

  /**
   * The "users" collection of methods.
   */
  public class Users {

    /**
     * Gets the current user's Gmail profile.
     *
     * Create a request for the method "users.getProfile".
     *
     * This request holds the parameters needed by the gmail server.  After setting any optional
     * parameters, call the {@link GetProfile#execute()} method to invoke the remote operation.
     *
     * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
     *        [default: me]
     * @return the request
     */
    public auto getProfile_(RequestT = Request, ResponseT = Response)(string userId) {
      auto result = new GetProfile!(RequestT, ResponseT)(userId);
      initialize!(RequestT, ResponseT, GetProfile)(result);
      return result;
    }

    public class GetProfile
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.Profile.Profile, MediaContentType) {
      private static const string REST_PATH = "gmail/v1/users/{userId}/profile";

      /**
       * Gets the current user's Gmail profile.
       *
       * Create a request for the method "users.getProfile".
       *
       * This request holds the parameters needed by the the gmail server.  After setting any optional
       * parameters, call the {@link GetProfile#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetProfile#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
     *        [default: me]
       * @since 1.13
       */
      protected this(string userId) {
        this.userId = enforce(userId, "Required parameter userId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{userId}", userId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public GetProfile!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
        }
        public GetProfile!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
          return cast(GetProfile!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
        }
      }

      /**
       * The user's email address. The special value `me` can be used to indicate the authenticated
       * user.
       */
      private string userId;

      /** The user's email address. The special value `me` can be used to indicate the authenticated user.
     [default: me]
       */
      public string getUserId() {
        return userId;
      }

      /**
       * The user's email address. The special value `me` can be used to indicate the authenticated
       * user.
       */
      public GetProfile setUserId(string userId) {
        this.userId = userId;
        return this;
      }

    }
    /**
     * Stop receiving push notifications for the given user mailbox.
     *
     * Create a request for the method "users.stop".
     *
     * This request holds the parameters needed by the gmail server.  After setting any optional
     * parameters, call the {@link Stop#execute()} method to invoke the remote operation.
     *
     * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
     *        [default: me]
     * @return the request
     */
    public auto stop_(RequestT = Request, ResponseT = Response)(string userId) {
      auto result = new Stop!(RequestT, ResponseT)(userId);
      initialize!(RequestT, ResponseT, Stop)(result);
      return result;
    }

    public class Stop
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      GmailRequest!(RequestT, ResponseT, "POST", Object, Object, MediaContentType) {
      private static const string REST_PATH = "gmail/v1/users/{userId}/stop";

      /**
       * Stop receiving push notifications for the given user mailbox.
       *
       * Create a request for the method "users.stop".
       *
       * This request holds the parameters needed by the the gmail server.  After setting any optional
       * parameters, call the {@link Stop#execute()} method to invoke the remote operation. <p> {@link
       * Stop#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
     *        [default: me]
       * @since 1.13
       */
      protected this(string userId) {
        this.userId = enforce(userId, "Required parameter userId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{userId}", userId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Stop!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
        }
      }

      /**
       * The user's email address. The special value `me` can be used to indicate the authenticated
       * user.
       */
      private string userId;

      /** The user's email address. The special value `me` can be used to indicate the authenticated user.
     [default: me]
       */
      public string getUserId() {
        return userId;
      }

      /**
       * The user's email address. The special value `me` can be used to indicate the authenticated
       * user.
       */
      public Stop setUserId(string userId) {
        this.userId = userId;
        return this;
      }

    }
    /**
     * Set up or update a push notification watch on the given user mailbox.
     *
     * Create a request for the method "users.watch".
     *
     * This request holds the parameters needed by the gmail server.  After setting any optional
     * parameters, call the {@link Watch#execute()} method to invoke the remote operation.
     *
     * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
     *        [default: me]
     * @param content the {@link Google.Apis.Gmail.v1.Data.WatchRequest}
     * @return the request
     */
    public auto watch_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.WatchRequest.WatchRequest content) {
      auto result = new Watch!(RequestT, ResponseT)(userId, content);
      initialize!(RequestT, ResponseT, Watch)(result);
      return result;
    }

    public class Watch
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.WatchRequest.WatchRequest, Google.Apis.Gmail.v1.Data.WatchResponse.WatchResponse, MediaContentType) {
      private static const string REST_PATH = "gmail/v1/users/{userId}/watch";

      /**
       * Set up or update a push notification watch on the given user mailbox.
       *
       * Create a request for the method "users.watch".
       *
       * This request holds the parameters needed by the the gmail server.  After setting any optional
       * parameters, call the {@link Watch#execute()} method to invoke the remote operation. <p> {@link
       * Watch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
     *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.WatchRequest}
       * @since 1.13
       */
      protected this(string userId, Google.Apis.Gmail.v1.Data.WatchRequest.WatchRequest content) {
        this.userId = enforce(userId, "Required parameter userId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{userId}", userId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Watch!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
        }
      }

      /**
       * The user's email address. The special value `me` can be used to indicate the authenticated
       * user.
       */
      private string userId;

      /** The user's email address. The special value `me` can be used to indicate the authenticated user.
     [default: me]
       */
      public string getUserId() {
        return userId;
      }

      /**
       * The user's email address. The special value `me` can be used to indicate the authenticated
       * user.
       */
      public Watch setUserId(string userId) {
        this.userId = userId;
        return this;
      }

    }

    /**
     * An accessor for creating requests from the Drafts collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Gmail gmail = new Gmail(...);}
     *   {@code Gmail.Drafts.List request = gmail.drafts().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Drafts drafts() {
      return new Drafts();
    }

    /**
     * The "drafts" collection of methods.
     */
    public class Drafts {

      /**
       * Creates a new draft with the `DRAFT` label.
       *
       * Create a request for the method "drafts.create".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Draft}
       * @return the request
       */
      public auto create_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.Draft.Draft content) {
        auto result = new Create!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, Create)(result);
        return result;
      }

      /**
       * Creates a new draft with the `DRAFT` label.
       *
       * Create a request for the method "drafts.create".
       *
       * This request holds the parameters needed by the the gmail server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * <p>
       * This method should be used for uploading media content.
       * </p>
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Draft} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @return the request
       */
      public auto create_(RequestT = Request, ResponseT = Response, MediaContentType = string)(string userId, Google.Apis.Gmail.v1.Data.Draft.Draft content, MediaContentType mediaContent) {
        auto result = new Create!(RequestT, ResponseT, MediaContentType)(userId, content, mediaContent);
        initialize!(RequestT, ResponseT, MediaContentType, Create)(result);
        return result;
      }

      public class Create
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.Draft.Draft, Google.Apis.Gmail.v1.Data.Draft.Draft, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/drafts";

        /**
         * Creates a new draft with the `DRAFT` label.
         *
         * Create a request for the method "drafts.create".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Draft}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Draft.Draft content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        /**
         * Creates a new draft with the `DRAFT` label.
         *
         * Create a request for the method "drafts.create".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * <p>
         * This constructor should be used for uploading media content.
         * </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Draft} media metadata or {@code null} if none
         * @param mediaContent The media HTTP content or {@code null} if none.
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Draft.Draft content, MediaContentType mediaContent) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_ROOT_URL ~ "upload/" ~ DEFAULT_SERVICE_PATH);
          this.mediaContent = mediaContent;
          this.content = content;
        }

        override {

          public Create!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Create setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Immediately and permanently deletes the specified draft. Does not simply trash it.
       *
       * Create a request for the method "drafts.delete".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the draft to delete.
       * @return the request
       */
      public auto delete_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Delete!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Delete)(result);
        return result;
      }

      public class Delete
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/drafts/{id}";

        /**
         * Immediately and permanently deletes the specified draft. Does not simply trash it.
         *
         * Create a request for the method "drafts.delete".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the draft to delete.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Delete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Delete setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the draft to delete. */
        private string id;

        /** The ID of the draft to delete.
         */
        public string getId() {
          return id;
        }

        /** The ID of the draft to delete. */
        public Delete setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Gets the specified draft.
       *
       * Create a request for the method "drafts.get".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the draft to retrieve.
       * @return the request
       */
      public auto get_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Get!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Get)(result);
        return result;
      }

      public class Get
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.Draft.Draft, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/drafts/{id}";

        /**
         * Gets the specified draft.
         *
         * Create a request for the method "drafts.get".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the draft to retrieve.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Get setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the draft to retrieve. */
        private string id;

        /** The ID of the draft to retrieve.
         */
        public string getId() {
          return id;
        }

        /** The ID of the draft to retrieve. */
        public Get setId(string id) {
          this.id = id;
          return this;
        }

        /** The format to return the draft in. */
        private string format;

        /** The format to return the draft in. [default: full]
         */
        public string getFormat() {
          return format;
        }

        /** The format to return the draft in. */
        public Get setFormat(string format) {
          this.format = format;
          set!(string)("format", format);
          return this;
        }

      }
      /**
       * Lists the drafts in the user's mailbox.
       *
       * Create a request for the method "drafts.list".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto list_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new List!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, List)(result);
        return result;
      }

      public class List
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListDraftsResponse.ListDraftsResponse, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/drafts";

        /**
         * Lists the drafts in the user's mailbox.
         *
         * Create a request for the method "drafts.list".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public List setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** Include drafts from `SPAM` and `TRASH` in the results. */
        private Nullable!bool includeSpamTrash;

        /** Include drafts from `SPAM` and `TRASH` in the results. [default: false]
         */
        public Nullable!bool getIncludeSpamTrash() {
          return includeSpamTrash;
        }

        /** Include drafts from `SPAM` and `TRASH` in the results. */
        public List setIncludeSpamTrash(Nullable!bool includeSpamTrash) {
          this.includeSpamTrash = includeSpamTrash;
          set!(Nullable!bool)("includeSpamTrash", includeSpamTrash);
          return this;
        }

        /**
         * Maximum number of drafts to return. This field defaults to 100. The maximum allowed value
         * for this field is 500.
         */
        private Nullable!long maxResults;

        /** Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this
       field is 500. [default: 100]
         */
        public Nullable!long getMaxResults() {
          return maxResults;
        }

        /**
         * Maximum number of drafts to return. This field defaults to 100. The maximum allowed value
         * for this field is 500.
         */
        public List setMaxResults(Nullable!long maxResults) {
          this.maxResults = maxResults;
          set!(Nullable!long)("maxResults", maxResults);
          return this;
        }

        /** Page token to retrieve a specific page of results in the list. */
        private string pageToken;

        /** Page token to retrieve a specific page of results in the list.
         */
        public string getPageToken() {
          return pageToken;
        }

        /** Page token to retrieve a specific page of results in the list. */
        public List setPageToken(string pageToken) {
          this.pageToken = pageToken;
          set!(string)("pageToken", pageToken);
          return this;
        }

        /**
         * Only return draft messages matching the specified query. Supports the same query format
         * as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid:
         * is:unread"`.
         */
        private string q;

        /** Only return draft messages matching the specified query. Supports the same query format as the
       Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
         */
        public string getQ() {
          return q;
        }

        /**
         * Only return draft messages matching the specified query. Supports the same query format
         * as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid:
         * is:unread"`.
         */
        public List setQ(string q) {
          this.q = q;
          set!(string)("q", q);
          return this;
        }

      }
      /**
       * Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.
       *
       * Create a request for the method "drafts.send".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Send#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Draft}
       * @return the request
       */
      public auto send_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.Draft.Draft content) {
        auto result = new Send!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, Send)(result);
        return result;
      }

      /**
       * Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.
       *
       * Create a request for the method "drafts.send".
       *
       * This request holds the parameters needed by the the gmail server.  After setting any optional
       * parameters, call the {@link Send#execute()} method to invoke the remote operation.
       *
       * <p>
       * This method should be used for uploading media content.
       * </p>
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Draft} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @return the request
       */
      public auto send_(RequestT = Request, ResponseT = Response, MediaContentType = string)(string userId, Google.Apis.Gmail.v1.Data.Draft.Draft content, MediaContentType mediaContent) {
        auto result = new Send!(RequestT, ResponseT, MediaContentType)(userId, content, mediaContent);
        initialize!(RequestT, ResponseT, MediaContentType, Send)(result);
        return result;
      }

      public class Send
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.Draft.Draft, Google.Apis.Gmail.v1.Data.Message.Message, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/drafts/send";

        /**
         * Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.
         *
         * Create a request for the method "drafts.send".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Send#execute()} method to invoke the remote operation. <p> {@link
         * Send#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Draft}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Draft.Draft content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        /**
         * Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.
         *
         * Create a request for the method "drafts.send".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Send#execute()} method to invoke the remote operation. <p> {@link
         * Send#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * <p>
         * This constructor should be used for uploading media content.
         * </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Draft} media metadata or {@code null} if none
         * @param mediaContent The media HTTP content or {@code null} if none.
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Draft.Draft content, MediaContentType mediaContent) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_ROOT_URL ~ "upload/" ~ DEFAULT_SERVICE_PATH);
          this.mediaContent = mediaContent;
          this.content = content;
        }

        override {

          public Send!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Send setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Replaces a draft's content.
       *
       * Create a request for the method "drafts.update".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the draft to update.
       * @param content the {@link Google.Apis.Gmail.v1.Data.Draft}
       * @return the request
       */
      public auto update_(RequestT = Request, ResponseT = Response)(string userId, string id, Google.Apis.Gmail.v1.Data.Draft.Draft content) {
        auto result = new Update!(RequestT, ResponseT)(userId, id, content);
        initialize!(RequestT, ResponseT, Update)(result);
        return result;
      }

      /**
       * Replaces a draft's content.
       *
       * Create a request for the method "drafts.update".
       *
       * This request holds the parameters needed by the the gmail server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * <p>
       * This method should be used for uploading media content.
       * </p>
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]@param id The ID of the draft to update.
       * @param content the {@link Google.Apis.Gmail.v1.Data.Draft} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @return the request
       */
      public auto update_(RequestT = Request, ResponseT = Response, MediaContentType = string)(string userId, string id, Google.Apis.Gmail.v1.Data.Draft.Draft content, MediaContentType mediaContent) {
        auto result = new Update!(RequestT, ResponseT, MediaContentType)(userId, id, content, mediaContent);
        initialize!(RequestT, ResponseT, MediaContentType, Update)(result);
        return result;
      }

      public class Update
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "PUT", Google.Apis.Gmail.v1.Data.Draft.Draft, Google.Apis.Gmail.v1.Data.Draft.Draft, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/drafts/{id}";

        /**
         * Replaces a draft's content.
         *
         * Create a request for the method "drafts.update".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the draft to update.
         * @param content the {@link Google.Apis.Gmail.v1.Data.Draft}
         * @since 1.13
         */
        protected this(string userId, string id, Google.Apis.Gmail.v1.Data.Draft.Draft content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        /**
         * Replaces a draft's content.
         *
         * Create a request for the method "drafts.update".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * <p>
         * This constructor should be used for uploading media content.
         * </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]@param id The ID of the draft to update.
         * @param content the {@link Google.Apis.Gmail.v1.Data.Draft} media metadata or {@code null} if none
         * @param mediaContent The media HTTP content or {@code null} if none.
         * @since 1.13
         */
        protected this(string userId, string id, Google.Apis.Gmail.v1.Data.Draft.Draft content, MediaContentType mediaContent) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");
          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_ROOT_URL ~ "upload/" ~ DEFAULT_SERVICE_PATH);
          this.mediaContent = mediaContent;
          this.content = content;
        }

        override {

          public Update!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Update setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the draft to update. */
        private string id;

        /** The ID of the draft to update.
         */
        public string getId() {
          return id;
        }

        /** The ID of the draft to update. */
        public Update setId(string id) {
          this.id = id;
          return this;
        }

      }

    }
    /**
     * An accessor for creating requests from the History collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Gmail gmail = new Gmail(...);}
     *   {@code Gmail.History.List request = gmail.history().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public History history() {
      return new History();
    }

    /**
     * The "history" collection of methods.
     */
    public class History {

      /**
       * Lists the history of all changes to the given mailbox. History results are returned in
       * chronological order (increasing `historyId`).
       *
       * Create a request for the method "history.list".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto list_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new List!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, List)(result);
        return result;
      }

      public class List
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListHistoryResponse.ListHistoryResponse, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/history";

        /**
         * Lists the history of all changes to the given mailbox. History results are returned in
         * chronological order (increasing `historyId`).
         *
         * Create a request for the method "history.list".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public List setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** History types to be returned by the function */
        private string[] historyTypes;

        /** History types to be returned by the function
         */
        public string[] getHistoryTypes() {
          return historyTypes;
        }

        /** History types to be returned by the function */
        public List setHistoryTypes(string[] historyTypes) {
          this.historyTypes = historyTypes;
          set!(string[])("historyTypes", historyTypes);
          return this;
        }

        /** Only return messages with a label matching the ID. */
        private string labelId;

        /** Only return messages with a label matching the ID.
         */
        public string getLabelId() {
          return labelId;
        }

        /** Only return messages with a label matching the ID. */
        public List setLabelId(string labelId) {
          this.labelId = labelId;
          set!(string)("labelId", labelId);
          return this;
        }

        /**
         * Maximum number of history records to return. This field defaults to 100. The maximum
         * allowed value for this field is 500.
         */
        private Nullable!long maxResults;

        /** Maximum number of history records to return. This field defaults to 100. The maximum allowed value
       for this field is 500. [default: 100]
         */
        public Nullable!long getMaxResults() {
          return maxResults;
        }

        /**
         * Maximum number of history records to return. This field defaults to 100. The maximum
         * allowed value for this field is 500.
         */
        public List setMaxResults(Nullable!long maxResults) {
          this.maxResults = maxResults;
          set!(Nullable!long)("maxResults", maxResults);
          return this;
        }

        /** Page token to retrieve a specific page of results in the list. */
        private string pageToken;

        /** Page token to retrieve a specific page of results in the list.
         */
        public string getPageToken() {
          return pageToken;
        }

        /** Page token to retrieve a specific page of results in the list. */
        public List setPageToken(string pageToken) {
          this.pageToken = pageToken;
          set!(string)("pageToken", pageToken);
          return this;
        }

        /**
         * Required. Returns history records after the specified `startHistoryId`. The supplied
         * `startHistoryId` should be obtained from the `historyId` of a message, thread, or
         * previous `list` response. History IDs increase chronologically but are not contiguous
         * with random gaps in between valid IDs. Supplying an invalid or out of date
         * `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically
         * valid for at least a week, but in some rare circumstances may be valid for only a few
         * hours. If you receive an `HTTP 404` error response, your application should perform a
         * full sync. If you receive no `nextPageToken` in the response, there are no updates to
         * retrieve and you can store the returned `historyId` for a future request.
         */
        private MyNullable!ulong startHistoryId;

        /** Required. Returns history records after the specified `startHistoryId`. The supplied
       `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list`
       response. History IDs increase chronologically but are not contiguous with random gaps in between
       valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404`
       error code. A `historyId` is typically valid for at least a week, but in some rare circumstances
       may be valid for only a few hours. If you receive an `HTTP 404` error response, your application
       should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates
       to retrieve and you can store the returned `historyId` for a future request.
         */
        public MyNullable!ulong getStartHistoryId() {
          return startHistoryId;
        }

        /**
         * Required. Returns history records after the specified `startHistoryId`. The supplied
         * `startHistoryId` should be obtained from the `historyId` of a message, thread, or
         * previous `list` response. History IDs increase chronologically but are not contiguous
         * with random gaps in between valid IDs. Supplying an invalid or out of date
         * `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically
         * valid for at least a week, but in some rare circumstances may be valid for only a few
         * hours. If you receive an `HTTP 404` error response, your application should perform a
         * full sync. If you receive no `nextPageToken` in the response, there are no updates to
         * retrieve and you can store the returned `historyId` for a future request.
         */
        public List setStartHistoryId(MyNullable!ulong startHistoryId) {
          this.startHistoryId = startHistoryId;
          set!(MyNullable!ulong)("startHistoryId", startHistoryId);
          return this;
        }

      }

    }
    /**
     * An accessor for creating requests from the Labels collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Gmail gmail = new Gmail(...);}
     *   {@code Gmail.Labels.List request = gmail.labels().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Labels labels() {
      return new Labels();
    }

    /**
     * The "labels" collection of methods.
     */
    public class Labels {

      /**
       * Creates a new label.
       *
       * Create a request for the method "labels.create".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Label}
       * @return the request
       */
      public auto create_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.Label.Label content) {
        auto result = new Create!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, Create)(result);
        return result;
      }

      public class Create
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.Label.Label, Google.Apis.Gmail.v1.Data.Label.Label, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/labels";

        /**
         * Creates a new label.
         *
         * Create a request for the method "labels.create".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Label}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Label.Label content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public Create!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Create!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Create setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Immediately and permanently deletes the specified label and removes it from any messages and
       * threads that it is applied to.
       *
       * Create a request for the method "labels.delete".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the label to delete.
       * @return the request
       */
      public auto delete_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Delete!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Delete)(result);
        return result;
      }

      public class Delete
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/labels/{id}";

        /**
         * Immediately and permanently deletes the specified label and removes it from any messages and
         * threads that it is applied to.
         *
         * Create a request for the method "labels.delete".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the label to delete.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Delete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Delete setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the label to delete. */
        private string id;

        /** The ID of the label to delete.
         */
        public string getId() {
          return id;
        }

        /** The ID of the label to delete. */
        public Delete setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Gets the specified label.
       *
       * Create a request for the method "labels.get".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the label to retrieve.
       * @return the request
       */
      public auto get_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Get!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Get)(result);
        return result;
      }

      public class Get
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.Label.Label, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/labels/{id}";

        /**
         * Gets the specified label.
         *
         * Create a request for the method "labels.get".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the label to retrieve.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Get setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the label to retrieve. */
        private string id;

        /** The ID of the label to retrieve.
         */
        public string getId() {
          return id;
        }

        /** The ID of the label to retrieve. */
        public Get setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Lists all labels in the user's mailbox.
       *
       * Create a request for the method "labels.list".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto list_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new List!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, List)(result);
        return result;
      }

      public class List
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListLabelsResponse.ListLabelsResponse, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/labels";

        /**
         * Lists all labels in the user's mailbox.
         *
         * Create a request for the method "labels.list".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public List setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Patch the specified label.
       *
       * Create a request for the method "labels.patch".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the label to update.
       * @param content the {@link Google.Apis.Gmail.v1.Data.Label}
       * @return the request
       */
      public auto patch_(RequestT = Request, ResponseT = Response)(string userId, string id, Google.Apis.Gmail.v1.Data.Label.Label content) {
        auto result = new Patch!(RequestT, ResponseT)(userId, id, content);
        initialize!(RequestT, ResponseT, Patch)(result);
        return result;
      }

      public class Patch
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "PATCH", Google.Apis.Gmail.v1.Data.Label.Label, Google.Apis.Gmail.v1.Data.Label.Label, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/labels/{id}";

        /**
         * Patch the specified label.
         *
         * Create a request for the method "labels.patch".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the label to update.
         * @param content the {@link Google.Apis.Gmail.v1.Data.Label}
         * @since 1.13
         */
        protected this(string userId, string id, Google.Apis.Gmail.v1.Data.Label.Label content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public Patch!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Patch!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Patch setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the label to update. */
        private string id;

        /** The ID of the label to update.
         */
        public string getId() {
          return id;
        }

        /** The ID of the label to update. */
        public Patch setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Updates the specified label.
       *
       * Create a request for the method "labels.update".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the label to update.
       * @param content the {@link Google.Apis.Gmail.v1.Data.Label}
       * @return the request
       */
      public auto update_(RequestT = Request, ResponseT = Response)(string userId, string id, Google.Apis.Gmail.v1.Data.Label.Label content) {
        auto result = new Update!(RequestT, ResponseT)(userId, id, content);
        initialize!(RequestT, ResponseT, Update)(result);
        return result;
      }

      public class Update
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "PUT", Google.Apis.Gmail.v1.Data.Label.Label, Google.Apis.Gmail.v1.Data.Label.Label, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/labels/{id}";

        /**
         * Updates the specified label.
         *
         * Create a request for the method "labels.update".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the label to update.
         * @param content the {@link Google.Apis.Gmail.v1.Data.Label}
         * @since 1.13
         */
        protected this(string userId, string id, Google.Apis.Gmail.v1.Data.Label.Label content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public Update!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Update!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Update setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the label to update. */
        private string id;

        /** The ID of the label to update.
         */
        public string getId() {
          return id;
        }

        /** The ID of the label to update. */
        public Update setId(string id) {
          this.id = id;
          return this;
        }

      }

    }
    /**
     * An accessor for creating requests from the Messages collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Gmail gmail = new Gmail(...);}
     *   {@code Gmail.Messages.List request = gmail.messages().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Messages messages() {
      return new Messages();
    }

    /**
     * The "messages" collection of methods.
     */
    public class Messages {

      /**
       * Deletes many messages by message ID. Provides no guarantees that messages were not already
       * deleted or even existed at all.
       *
       * Create a request for the method "messages.batchDelete".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link BatchDelete#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.BatchDeleteMessagesRequest}
       * @return the request
       */
      public auto batchDelete_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.BatchDeleteMessagesRequest.BatchDeleteMessagesRequest content) {
        auto result = new BatchDelete!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, BatchDelete)(result);
        return result;
      }

      public class BatchDelete
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.BatchDeleteMessagesRequest.BatchDeleteMessagesRequest, Object, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages/batchDelete";

        /**
         * Deletes many messages by message ID. Provides no guarantees that messages were not already
         * deleted or even existed at all.
         *
         * Create a request for the method "messages.batchDelete".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link BatchDelete#execute()} method to invoke the remote operation. <p>
         * {@link
         * BatchDelete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.BatchDeleteMessagesRequest}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.BatchDeleteMessagesRequest.BatchDeleteMessagesRequest content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public BatchDelete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public BatchDelete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(BatchDelete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public BatchDelete setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Modifies the labels on the specified messages.
       *
       * Create a request for the method "messages.batchModify".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link BatchModify#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.BatchModifyMessagesRequest}
       * @return the request
       */
      public auto batchModify_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.BatchModifyMessagesRequest.BatchModifyMessagesRequest content) {
        auto result = new BatchModify!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, BatchModify)(result);
        return result;
      }

      public class BatchModify
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.BatchModifyMessagesRequest.BatchModifyMessagesRequest, Object, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages/batchModify";

        /**
         * Modifies the labels on the specified messages.
         *
         * Create a request for the method "messages.batchModify".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link BatchModify#execute()} method to invoke the remote operation. <p>
         * {@link
         * BatchModify#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.BatchModifyMessagesRequest}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.BatchModifyMessagesRequest.BatchModifyMessagesRequest content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public BatchModify!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public BatchModify!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(BatchModify!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public BatchModify setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Immediately and permanently deletes the specified message. This operation cannot be undone.
       * Prefer `messages.trash` instead.
       *
       * Create a request for the method "messages.delete".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the message to delete.
       * @return the request
       */
      public auto delete_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Delete!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Delete)(result);
        return result;
      }

      public class Delete
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages/{id}";

        /**
         * Immediately and permanently deletes the specified message. This operation cannot be undone.
         * Prefer `messages.trash` instead.
         *
         * Create a request for the method "messages.delete".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the message to delete.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Delete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Delete setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the message to delete. */
        private string id;

        /** The ID of the message to delete.
         */
        public string getId() {
          return id;
        }

        /** The ID of the message to delete. */
        public Delete setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Gets the specified message.
       *
       * Create a request for the method "messages.get".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is
       *        also contained in the result when a message is inserted (`messages.insert`) or imported
       *        (`messages.import`).
       * @return the request
       */
      public auto get_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Get!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Get)(result);
        return result;
      }

      public class Get
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.Message.Message, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages/{id}";

        /**
         * Gets the specified message.
         *
         * Create a request for the method "messages.get".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is
       *        also contained in the result when a message is inserted (`messages.insert`) or imported
       *        (`messages.import`).
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Get setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /**
         * The ID of the message to retrieve. This ID is usually retrieved using `messages.list`.
         * The ID is also contained in the result when a message is inserted (`messages.insert`) or
         * imported (`messages.import`).
         */
        private string id;

        /** The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is
       also contained in the result when a message is inserted (`messages.insert`) or imported
       (`messages.import`).
         */
        public string getId() {
          return id;
        }

        /**
         * The ID of the message to retrieve. This ID is usually retrieved using `messages.list`.
         * The ID is also contained in the result when a message is inserted (`messages.insert`) or
         * imported (`messages.import`).
         */
        public Get setId(string id) {
          this.id = id;
          return this;
        }

        /** The format to return the message in. */
        private string format;

        /** The format to return the message in. [default: full]
         */
        public string getFormat() {
          return format;
        }

        /** The format to return the message in. */
        public Get setFormat(string format) {
          this.format = format;
          set!(string)("format", format);
          return this;
        }

        /** When given and format is `METADATA`, only include headers specified. */
        private string[] metadataHeaders;

        /** When given and format is `METADATA`, only include headers specified.
         */
        public string[] getMetadataHeaders() {
          return metadataHeaders;
        }

        /** When given and format is `METADATA`, only include headers specified. */
        public Get setMetadataHeaders(string[] metadataHeaders) {
          this.metadataHeaders = metadataHeaders;
          set!(string[])("metadataHeaders", metadataHeaders);
          return this;
        }

      }
      /**
       * Imports a message into only this user's mailbox, with standard email delivery scanning and
       * classification similar to receiving via SMTP. Does not send a message. Note: This function
       * doesn't trigger forwarding rules or filters set up by the user.
       *
       * Create a request for the method "messages.import".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Import#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Message}
       * @return the request
       */
      public auto import_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.Message.Message content) {
        auto result = new Import!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, Import)(result);
        return result;
      }

      /**
       * Imports a message into only this user's mailbox, with standard email delivery scanning and
       * classification similar to receiving via SMTP. Does not send a message. Note: This function
       * doesn't trigger forwarding rules or filters set up by the user.
       *
       * Create a request for the method "messages.import".
       *
       * This request holds the parameters needed by the the gmail server.  After setting any optional
       * parameters, call the {@link Import#execute()} method to invoke the remote operation.
       *
       * <p>
       * This method should be used for uploading media content.
       * </p>
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Message} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @return the request
       */
      public auto import_(RequestT = Request, ResponseT = Response, MediaContentType = string)(string userId, Google.Apis.Gmail.v1.Data.Message.Message content, MediaContentType mediaContent) {
        auto result = new Import!(RequestT, ResponseT, MediaContentType)(userId, content, mediaContent);
        initialize!(RequestT, ResponseT, MediaContentType, Import)(result);
        return result;
      }

      public class Import
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.Message.Message, Google.Apis.Gmail.v1.Data.Message.Message, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages/import";

        /**
         * Imports a message into only this user's mailbox, with standard email delivery scanning and
         * classification similar to receiving via SMTP. Does not send a message. Note: This function
         * doesn't trigger forwarding rules or filters set up by the user.
         *
         * Create a request for the method "messages.import".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Import#execute()} method to invoke the remote operation. <p> {@link
         * Import#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Message}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Message.Message content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        /**
         * Imports a message into only this user's mailbox, with standard email delivery scanning and
         * classification similar to receiving via SMTP. Does not send a message. Note: This function
         * doesn't trigger forwarding rules or filters set up by the user.
         *
         * Create a request for the method "messages.import".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Import#execute()} method to invoke the remote operation. <p> {@link
         * Import#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * <p>
         * This constructor should be used for uploading media content.
         * </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Message} media metadata or {@code null} if none
         * @param mediaContent The media HTTP content or {@code null} if none.
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Message.Message content, MediaContentType mediaContent) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_ROOT_URL ~ "upload/" ~ DEFAULT_SERVICE_PATH);
          this.mediaContent = mediaContent;
          this.content = content;
        }

        override {

          public Import!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Import!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Import!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Import setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /**
         * Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a
         * Vault administrator. Only used for G Suite accounts.
         */
        private Nullable!bool deleted;

        /** Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault
       administrator. Only used for G Suite accounts. [default: false]
         */
        public Nullable!bool getDeleted() {
          return deleted;
        }

        /**
         * Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a
         * Vault administrator. Only used for G Suite accounts.
         */
        public Import setDeleted(Nullable!bool deleted) {
          this.deleted = deleted;
          set!(Nullable!bool)("deleted", deleted);
          return this;
        }

        /** Source for Gmail's internal date of the message. */
        private string internalDateSource;

        /** Source for Gmail's internal date of the message. [default: dateHeader]
         */
        public string getInternalDateSource() {
          return internalDateSource;
        }

        /** Source for Gmail's internal date of the message. */
        public Import setInternalDateSource(string internalDateSource) {
          this.internalDateSource = internalDateSource;
          set!(string)("internalDateSource", internalDateSource);
          return this;
        }

        /**
         * Ignore the Gmail spam classifier decision and never mark this email as SPAM in the
         * mailbox.
         */
        private Nullable!bool neverMarkSpam;

        /** Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.
       [default: false]
         */
        public Nullable!bool getNeverMarkSpam() {
          return neverMarkSpam;
        }

        /**
         * Ignore the Gmail spam classifier decision and never mark this email as SPAM in the
         * mailbox.
         */
        public Import setNeverMarkSpam(Nullable!bool neverMarkSpam) {
          this.neverMarkSpam = neverMarkSpam;
          set!(Nullable!bool)("neverMarkSpam", neverMarkSpam);
          return this;
        }

        /**
         * Process calendar invites in the email and add any extracted meetings to the Google
         * Calendar for this user.
         */
        private Nullable!bool processForCalendar;

        /** Process calendar invites in the email and add any extracted meetings to the Google Calendar for
       this user. [default: false]
         */
        public Nullable!bool getProcessForCalendar() {
          return processForCalendar;
        }

        /**
         * Process calendar invites in the email and add any extracted meetings to the Google
         * Calendar for this user.
         */
        public Import setProcessForCalendar(Nullable!bool processForCalendar) {
          this.processForCalendar = processForCalendar;
          set!(Nullable!bool)("processForCalendar", processForCalendar);
          return this;
        }

      }
      /**
       * Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most
       * scanning and classification. Does not send a message.
       *
       * Create a request for the method "messages.insert".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Message}
       * @return the request
       */
      public auto insert_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.Message.Message content) {
        auto result = new Insert!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, Insert)(result);
        return result;
      }

      /**
       * Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most
       * scanning and classification. Does not send a message.
       *
       * Create a request for the method "messages.insert".
       *
       * This request holds the parameters needed by the the gmail server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * <p>
       * This method should be used for uploading media content.
       * </p>
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Message} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @return the request
       */
      public auto insert_(RequestT = Request, ResponseT = Response, MediaContentType = string)(string userId, Google.Apis.Gmail.v1.Data.Message.Message content, MediaContentType mediaContent) {
        auto result = new Insert!(RequestT, ResponseT, MediaContentType)(userId, content, mediaContent);
        initialize!(RequestT, ResponseT, MediaContentType, Insert)(result);
        return result;
      }

      public class Insert
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.Message.Message, Google.Apis.Gmail.v1.Data.Message.Message, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages";

        /**
         * Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing
         * most scanning and classification. Does not send a message.
         *
         * Create a request for the method "messages.insert".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Message}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Message.Message content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        /**
         * Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing
         * most scanning and classification. Does not send a message.
         *
         * Create a request for the method "messages.insert".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * <p>
         * This constructor should be used for uploading media content.
         * </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Message} media metadata or {@code null} if none
         * @param mediaContent The media HTTP content or {@code null} if none.
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Message.Message content, MediaContentType mediaContent) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_ROOT_URL ~ "upload/" ~ DEFAULT_SERVICE_PATH);
          this.mediaContent = mediaContent;
          this.content = content;
        }

        override {

          public Insert!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Insert!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Insert setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /**
         * Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a
         * Vault administrator. Only used for G Suite accounts.
         */
        private Nullable!bool deleted;

        /** Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault
       administrator. Only used for G Suite accounts. [default: false]
         */
        public Nullable!bool getDeleted() {
          return deleted;
        }

        /**
         * Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a
         * Vault administrator. Only used for G Suite accounts.
         */
        public Insert setDeleted(Nullable!bool deleted) {
          this.deleted = deleted;
          set!(Nullable!bool)("deleted", deleted);
          return this;
        }

        /** Source for Gmail's internal date of the message. */
        private string internalDateSource;

        /** Source for Gmail's internal date of the message. [default: receivedTime]
         */
        public string getInternalDateSource() {
          return internalDateSource;
        }

        /** Source for Gmail's internal date of the message. */
        public Insert setInternalDateSource(string internalDateSource) {
          this.internalDateSource = internalDateSource;
          set!(string)("internalDateSource", internalDateSource);
          return this;
        }

      }
      /**
       * Lists the messages in the user's mailbox.
       *
       * Create a request for the method "messages.list".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto list_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new List!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, List)(result);
        return result;
      }

      public class List
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListMessagesResponse.ListMessagesResponse, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages";

        /**
         * Lists the messages in the user's mailbox.
         *
         * Create a request for the method "messages.list".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public List setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** Include messages from `SPAM` and `TRASH` in the results. */
        private Nullable!bool includeSpamTrash;

        /** Include messages from `SPAM` and `TRASH` in the results. [default: false]
         */
        public Nullable!bool getIncludeSpamTrash() {
          return includeSpamTrash;
        }

        /** Include messages from `SPAM` and `TRASH` in the results. */
        public List setIncludeSpamTrash(Nullable!bool includeSpamTrash) {
          this.includeSpamTrash = includeSpamTrash;
          set!(Nullable!bool)("includeSpamTrash", includeSpamTrash);
          return this;
        }

        /** Only return messages with labels that match all of the specified label IDs. */
        private string[] labelIds;

        /** Only return messages with labels that match all of the specified label IDs.
         */
        public string[] getLabelIds() {
          return labelIds;
        }

        /** Only return messages with labels that match all of the specified label IDs. */
        public List setLabelIds(string[] labelIds) {
          this.labelIds = labelIds;
          set!(string[])("labelIds", labelIds);
          return this;
        }

        /**
         * Maximum number of messages to return. This field defaults to 100. The maximum allowed
         * value for this field is 500.
         */
        private Nullable!long maxResults;

        /** Maximum number of messages to return. This field defaults to 100. The maximum allowed value for
       this field is 500. [default: 100]
         */
        public Nullable!long getMaxResults() {
          return maxResults;
        }

        /**
         * Maximum number of messages to return. This field defaults to 100. The maximum allowed
         * value for this field is 500.
         */
        public List setMaxResults(Nullable!long maxResults) {
          this.maxResults = maxResults;
          set!(Nullable!long)("maxResults", maxResults);
          return this;
        }

        /** Page token to retrieve a specific page of results in the list. */
        private string pageToken;

        /** Page token to retrieve a specific page of results in the list.
         */
        public string getPageToken() {
          return pageToken;
        }

        /** Page token to retrieve a specific page of results in the list. */
        public List setPageToken(string pageToken) {
          this.pageToken = pageToken;
          set!(string)("pageToken", pageToken);
          return this;
        }

        /**
         * Only return messages matching the specified query. Supports the same query format as the
         * Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
         * Parameter cannot be used when accessing the api using the gmail.metadata scope.
         */
        private string q;

        /** Only return messages matching the specified query. Supports the same query format as the Gmail
       search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be
       used when accessing the api using the gmail.metadata scope.
         */
        public string getQ() {
          return q;
        }

        /**
         * Only return messages matching the specified query. Supports the same query format as the
         * Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
         * Parameter cannot be used when accessing the api using the gmail.metadata scope.
         */
        public List setQ(string q) {
          this.q = q;
          set!(string)("q", q);
          return this;
        }

      }
      /**
       * Modifies the labels on the specified message.
       *
       * Create a request for the method "messages.modify".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Modify#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the message to modify.
       * @param content the {@link Google.Apis.Gmail.v1.Data.ModifyMessageRequest}
       * @return the request
       */
      public auto modify_(RequestT = Request, ResponseT = Response)(string userId, string id, Google.Apis.Gmail.v1.Data.ModifyMessageRequest.ModifyMessageRequest content) {
        auto result = new Modify!(RequestT, ResponseT)(userId, id, content);
        initialize!(RequestT, ResponseT, Modify)(result);
        return result;
      }

      public class Modify
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.ModifyMessageRequest.ModifyMessageRequest, Google.Apis.Gmail.v1.Data.Message.Message, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages/{id}/modify";

        /**
         * Modifies the labels on the specified message.
         *
         * Create a request for the method "messages.modify".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Modify#execute()} method to invoke the remote operation. <p> {@link
         * Modify#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the message to modify.
         * @param content the {@link Google.Apis.Gmail.v1.Data.ModifyMessageRequest}
         * @since 1.13
         */
        protected this(string userId, string id, Google.Apis.Gmail.v1.Data.ModifyMessageRequest.ModifyMessageRequest content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public Modify!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Modify setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the message to modify. */
        private string id;

        /** The ID of the message to modify.
         */
        public string getId() {
          return id;
        }

        /** The ID of the message to modify. */
        public Modify setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers.
       *
       * Create a request for the method "messages.send".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Send#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Message}
       * @return the request
       */
      public auto send_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.Message.Message content) {
        auto result = new Send!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, Send)(result);
        return result;
      }

      /**
       * Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers.
       *
       * Create a request for the method "messages.send".
       *
       * This request holds the parameters needed by the the gmail server.  After setting any optional
       * parameters, call the {@link Send#execute()} method to invoke the remote operation.
       *
       * <p>
       * This method should be used for uploading media content.
       * </p>
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.Message} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @return the request
       */
      public auto send_(RequestT = Request, ResponseT = Response, MediaContentType = string)(string userId, Google.Apis.Gmail.v1.Data.Message.Message content, MediaContentType mediaContent) {
        auto result = new Send!(RequestT, ResponseT, MediaContentType)(userId, content, mediaContent);
        initialize!(RequestT, ResponseT, MediaContentType, Send)(result);
        return result;
      }

      public class Send
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.Message.Message, Google.Apis.Gmail.v1.Data.Message.Message, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages/send";

        /**
         * Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers.
         *
         * Create a request for the method "messages.send".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Send#execute()} method to invoke the remote operation. <p> {@link
         * Send#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Message}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Message.Message content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        /**
         * Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers.
         *
         * Create a request for the method "messages.send".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Send#execute()} method to invoke the remote operation. <p> {@link
         * Send#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * <p>
         * This constructor should be used for uploading media content.
         * </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Message} media metadata or {@code null} if none
         * @param mediaContent The media HTTP content or {@code null} if none.
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.Message.Message content, MediaContentType mediaContent) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_ROOT_URL ~ "upload/" ~ DEFAULT_SERVICE_PATH);
          this.mediaContent = mediaContent;
          this.content = content;
        }

        override {

          public Send!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Send!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Send!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Send setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Moves the specified message to the trash.
       *
       * Create a request for the method "messages.trash".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Trash#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the message to Trash.
       * @return the request
       */
      public auto trash_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Trash!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Trash)(result);
        return result;
      }

      public class Trash
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Object, Google.Apis.Gmail.v1.Data.Message.Message, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages/{id}/trash";

        /**
         * Moves the specified message to the trash.
         *
         * Create a request for the method "messages.trash".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Trash#execute()} method to invoke the remote operation. <p> {@link
         * Trash#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the message to Trash.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Trash!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Trash setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the message to Trash. */
        private string id;

        /** The ID of the message to Trash.
         */
        public string getId() {
          return id;
        }

        /** The ID of the message to Trash. */
        public Trash setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Removes the specified message from the trash.
       *
       * Create a request for the method "messages.untrash".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Untrash#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the message to remove from Trash.
       * @return the request
       */
      public auto untrash_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Untrash!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Untrash)(result);
        return result;
      }

      public class Untrash
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Object, Google.Apis.Gmail.v1.Data.Message.Message, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/messages/{id}/untrash";

        /**
         * Removes the specified message from the trash.
         *
         * Create a request for the method "messages.untrash".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Untrash#execute()} method to invoke the remote operation. <p>
         * {@link
         * Untrash#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the message to remove from Trash.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Untrash!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Untrash setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the message to remove from Trash. */
        private string id;

        /** The ID of the message to remove from Trash.
         */
        public string getId() {
          return id;
        }

        /** The ID of the message to remove from Trash. */
        public Untrash setId(string id) {
          this.id = id;
          return this;
        }

      }

      /**
       * An accessor for creating requests from the Attachments collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Gmail gmail = new Gmail(...);}
       *   {@code Gmail.Attachments.List request = gmail.attachments().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Attachments attachments() {
        return new Attachments();
      }

      /**
       * The "attachments" collection of methods.
       */
      public class Attachments {

        /**
         * Gets the specified message attachment.
         *
         * Create a request for the method "attachments.get".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
         *        [default: me]
         * @param messageId The ID of the message containing the attachment.
         * @param id The ID of the attachment.
         * @return the request
         */
        public auto get_(RequestT = Request, ResponseT = Response)(string userId, string messageId, string id) {
          auto result = new Get!(RequestT, ResponseT)(userId, messageId, id);
          initialize!(RequestT, ResponseT, Get)(result);
          return result;
        }

        public class Get
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.MessagePartBody.MessagePartBody, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}";

          /**
           * Gets the specified message attachment.
           *
           * Create a request for the method "attachments.get".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
         *        [default: me]
           * @param messageId The ID of the message containing the attachment.
           * @param id The ID of the attachment.
           * @since 1.13
           */
          protected this(string userId, string messageId, string id) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.messageId = enforce(messageId, "Required parameter messageId must be specified.");
            this.id = enforce(id, "Required parameter id must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{messageId}", messageId);
            restPath = restPath.replace("{id}", id);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * The user's email address. The special value `me` can be used to indicate the
           * authenticated user.
           */
          private string userId;

          /** The user's email address. The special value `me` can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * The user's email address. The special value `me` can be used to indicate the
           * authenticated user.
           */
          public Get setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The ID of the message containing the attachment. */
          private string messageId;

          /** The ID of the message containing the attachment.
           */
          public string getMessageId() {
            return messageId;
          }

          /** The ID of the message containing the attachment. */
          public Get setMessageId(string messageId) {
            this.messageId = messageId;
            return this;
          }

          /** The ID of the attachment. */
          private string id;

          /** The ID of the attachment.
           */
          public string getId() {
            return id;
          }

          /** The ID of the attachment. */
          public Get setId(string id) {
            this.id = id;
            return this;
          }

        }

      }
    }
    /**
     * An accessor for creating requests from the Settings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Gmail gmail = new Gmail(...);}
     *   {@code Gmail.Settings.List request = gmail.settings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Settings settings() {
      return new Settings();
    }

    /**
     * The "settings" collection of methods.
     */
    public class Settings {

      /**
       * Gets the auto-forwarding setting for the specified account.
       *
       * Create a request for the method "settings.getAutoForwarding".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link GetAutoForwarding#execute()} method to invoke the remote operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto getAutoForwarding_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new GetAutoForwarding!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, GetAutoForwarding)(result);
        return result;
      }

      public class GetAutoForwarding
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.AutoForwarding.AutoForwarding, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/autoForwarding";

        /**
         * Gets the auto-forwarding setting for the specified account.
         *
         * Create a request for the method "settings.getAutoForwarding".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link GetAutoForwarding#execute()} method to invoke the remote operation.
         * <p> {@link GetAutoForwarding#initialize(com.google.api.client.googleapis.services.AbstractGoogl
         * eClientRequest)} must be called to initialize this instance immediately after invoking the
         * constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public GetAutoForwarding!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(GetAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public GetAutoForwarding setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Gets IMAP settings.
       *
       * Create a request for the method "settings.getImap".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link GetImap#execute()} method to invoke the remote operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto getImap_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new GetImap!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, GetImap)(result);
        return result;
      }

      public class GetImap
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ImapSettings.ImapSettings, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/imap";

        /**
         * Gets IMAP settings.
         *
         * Create a request for the method "settings.getImap".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link GetImap#execute()} method to invoke the remote operation. <p>
         * {@link
         * GetImap#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public GetImap!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public GetImap!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(GetImap!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public GetImap setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Gets language settings.
       *
       * Create a request for the method "settings.getLanguage".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link GetLanguage#execute()} method to invoke the remote operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto getLanguage_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new GetLanguage!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, GetLanguage)(result);
        return result;
      }

      public class GetLanguage
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.LanguageSettings.LanguageSettings, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/language";

        /**
         * Gets language settings.
         *
         * Create a request for the method "settings.getLanguage".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link GetLanguage#execute()} method to invoke the remote operation. <p>
         * {@link
         * GetLanguage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public GetLanguage!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public GetLanguage!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(GetLanguage!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public GetLanguage setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Gets POP settings.
       *
       * Create a request for the method "settings.getPop".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link GetPop#execute()} method to invoke the remote operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto getPop_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new GetPop!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, GetPop)(result);
        return result;
      }

      public class GetPop
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.PopSettings.PopSettings, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/pop";

        /**
         * Gets POP settings.
         *
         * Create a request for the method "settings.getPop".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link GetPop#execute()} method to invoke the remote operation. <p> {@link
         * GetPop#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public GetPop!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public GetPop!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(GetPop!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public GetPop setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Gets vacation responder settings.
       *
       * Create a request for the method "settings.getVacation".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link GetVacation#execute()} method to invoke the remote operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto getVacation_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new GetVacation!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, GetVacation)(result);
        return result;
      }

      public class GetVacation
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.VacationSettings.VacationSettings, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/vacation";

        /**
         * Gets vacation responder settings.
         *
         * Create a request for the method "settings.getVacation".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link GetVacation#execute()} method to invoke the remote operation. <p>
         * {@link
         * GetVacation#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public GetVacation!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public GetVacation!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(GetVacation!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public GetVacation setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Updates the auto-forwarding setting for the specified account. A verified forwarding address must
       * be specified when auto-forwarding is enabled. This method is only available to service account
       * clients that have been delegated domain-wide authority.
       *
       * Create a request for the method "settings.updateAutoForwarding".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link UpdateAutoForwarding#execute()} method to invoke the remote
       * operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.AutoForwarding}
       * @return the request
       */
      public auto updateAutoForwarding_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.AutoForwarding.AutoForwarding content) {
        auto result = new UpdateAutoForwarding!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, UpdateAutoForwarding)(result);
        return result;
      }

      public class UpdateAutoForwarding
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "PUT", Google.Apis.Gmail.v1.Data.AutoForwarding.AutoForwarding, Google.Apis.Gmail.v1.Data.AutoForwarding.AutoForwarding, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/autoForwarding";

        /**
         * Updates the auto-forwarding setting for the specified account. A verified forwarding address
         * must be specified when auto-forwarding is enabled. This method is only available to service
         * account clients that have been delegated domain-wide authority.
         *
         * Create a request for the method "settings.updateAutoForwarding".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link UpdateAutoForwarding#execute()} method to invoke the remote
         * operation. <p> {@link UpdateAutoForwarding#initialize(com.google.api.client.googleapis.services
         * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.AutoForwarding}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.AutoForwarding.AutoForwarding content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(UpdateAutoForwarding!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public UpdateAutoForwarding setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Updates IMAP settings.
       *
       * Create a request for the method "settings.updateImap".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link UpdateImap#execute()} method to invoke the remote operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.ImapSettings}
       * @return the request
       */
      public auto updateImap_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.ImapSettings.ImapSettings content) {
        auto result = new UpdateImap!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, UpdateImap)(result);
        return result;
      }

      public class UpdateImap
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "PUT", Google.Apis.Gmail.v1.Data.ImapSettings.ImapSettings, Google.Apis.Gmail.v1.Data.ImapSettings.ImapSettings, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/imap";

        /**
         * Updates IMAP settings.
         *
         * Create a request for the method "settings.updateImap".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link UpdateImap#execute()} method to invoke the remote operation. <p>
         * {@link
         * UpdateImap#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.ImapSettings}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.ImapSettings.ImapSettings content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public UpdateImap!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public UpdateImap!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(UpdateImap!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public UpdateImap setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Updates language settings. If successful, the return object contains the `displayLanguage` that
       * was saved for the user, which may differ from the value passed into the request. This is because
       * the requested `displayLanguage` may not be directly supported by Gmail but have a close variant
       * that is, and so the variant may be chosen and saved instead.
       *
       * Create a request for the method "settings.updateLanguage".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link UpdateLanguage#execute()} method to invoke the remote operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.LanguageSettings}
       * @return the request
       */
      public auto updateLanguage_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.LanguageSettings.LanguageSettings content) {
        auto result = new UpdateLanguage!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, UpdateLanguage)(result);
        return result;
      }

      public class UpdateLanguage
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "PUT", Google.Apis.Gmail.v1.Data.LanguageSettings.LanguageSettings, Google.Apis.Gmail.v1.Data.LanguageSettings.LanguageSettings, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/language";

        /**
         * Updates language settings. If successful, the return object contains the `displayLanguage` that
         * was saved for the user, which may differ from the value passed into the request. This is
         * because the requested `displayLanguage` may not be directly supported by Gmail but have a close
         * variant that is, and so the variant may be chosen and saved instead.
         *
         * Create a request for the method "settings.updateLanguage".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link UpdateLanguage#execute()} method to invoke the remote operation.
         * <p> {@link UpdateLanguage#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
         * ientRequest)} must be called to initialize this instance immediately after invoking the
         * constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.LanguageSettings}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.LanguageSettings.LanguageSettings content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public UpdateLanguage!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(UpdateLanguage!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public UpdateLanguage setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Updates POP settings.
       *
       * Create a request for the method "settings.updatePop".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link UpdatePop#execute()} method to invoke the remote operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.PopSettings}
       * @return the request
       */
      public auto updatePop_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.PopSettings.PopSettings content) {
        auto result = new UpdatePop!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, UpdatePop)(result);
        return result;
      }

      public class UpdatePop
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "PUT", Google.Apis.Gmail.v1.Data.PopSettings.PopSettings, Google.Apis.Gmail.v1.Data.PopSettings.PopSettings, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/pop";

        /**
         * Updates POP settings.
         *
         * Create a request for the method "settings.updatePop".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link UpdatePop#execute()} method to invoke the remote operation. <p>
         * {@link
         * UpdatePop#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.PopSettings}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.PopSettings.PopSettings content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public UpdatePop!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public UpdatePop!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(UpdatePop!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public UpdatePop setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }
      /**
       * Updates vacation responder settings.
       *
       * Create a request for the method "settings.updateVacation".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link UpdateVacation#execute()} method to invoke the remote operation.
       *
       * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
       * @param content the {@link Google.Apis.Gmail.v1.Data.VacationSettings}
       * @return the request
       */
      public auto updateVacation_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.VacationSettings.VacationSettings content) {
        auto result = new UpdateVacation!(RequestT, ResponseT)(userId, content);
        initialize!(RequestT, ResponseT, UpdateVacation)(result);
        return result;
      }

      public class UpdateVacation
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "PUT", Google.Apis.Gmail.v1.Data.VacationSettings.VacationSettings, Google.Apis.Gmail.v1.Data.VacationSettings.VacationSettings, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/settings/vacation";

        /**
         * Updates vacation responder settings.
         *
         * Create a request for the method "settings.updateVacation".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link UpdateVacation#execute()} method to invoke the remote operation.
         * <p> {@link UpdateVacation#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
         * ientRequest)} must be called to initialize this instance immediately after invoking the
         * constructor. </p>
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
       *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.VacationSettings}
         * @since 1.13
         */
        protected this(string userId, Google.Apis.Gmail.v1.Data.VacationSettings.VacationSettings content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public UpdateVacation!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(UpdateVacation!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        private string userId;

        /** User's email address. The special value "me" can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * User's email address. The special value "me" can be used to indicate the authenticated
         * user.
         */
        public UpdateVacation setUserId(string userId) {
          this.userId = userId;
          return this;
        }

      }

      /**
       * An accessor for creating requests from the Delegates collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Gmail gmail = new Gmail(...);}
       *   {@code Gmail.Delegates.List request = gmail.delegates().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Delegates delegates() {
        return new Delegates();
      }

      /**
       * The "delegates" collection of methods.
       */
      public class Delegates {

        /**
         * Adds a delegate with its verification status set directly to `accepted`, without sending any
         * verification email. The delegate user must be a member of the same G Suite organization as the
         * delegator user. Gmail imposes limitations on the number of delegates and delegators each user in
         * a G Suite organization can have. These limits depend on your organization, but in general each
         * user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be
         * referred to by their primary email address, and not an email alias. Also note that when a new
         * delegate is created, there may be up to a one minute delay before the new delegate is available
         * for use. This method is only available to service account clients that have been delegated
         * domain-wide authority.
         *
         * Create a request for the method "delegates.create".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Delegate}
         * @return the request
         */
        public auto create_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.Delegate.Delegate content) {
          auto result = new Create!(RequestT, ResponseT)(userId, content);
          initialize!(RequestT, ResponseT, Create)(result);
          return result;
        }

        public class Create
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.Delegate.Delegate, Google.Apis.Gmail.v1.Data.Delegate.Delegate, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/delegates";

          /**
           * Adds a delegate with its verification status set directly to `accepted`, without sending any
           * verification email. The delegate user must be a member of the same G Suite organization as the
           * delegator user. Gmail imposes limitations on the number of delegates and delegators each user
           * in a G Suite organization can have. These limits depend on your organization, but in general
           * each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must
           * be referred to by their primary email address, and not an email alias. Also note that when a
           * new delegate is created, there may be up to a one minute delay before the new delegate is
           * available for use. This method is only available to service account clients that have been
           * delegated domain-wide authority.
           *
           * Create a request for the method "delegates.create".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param content the {@link Google.Apis.Gmail.v1.Data.Delegate}
           * @since 1.13
           */
          protected this(string userId, Google.Apis.Gmail.v1.Data.Delegate.Delegate content) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            super(restPath, DEFAULT_BASE_URL);
            this.content = content;
          }

          override {

            public Create!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Create setUserId(string userId) {
            this.userId = userId;
            return this;
          }

        }
        /**
         * Removes the specified delegate (which can be of any verification status), and revokes any
         * verification that may have been required for using it. Note that a delegate user must be referred
         * to by their primary email address, and not an email alias. This method is only available to
         * service account clients that have been delegated domain-wide authority.
         *
         * Create a request for the method "delegates.delete".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param delegateEmail The email address of the user to be removed as a delegate.
         * @return the request
         */
        public auto delete_(RequestT = Request, ResponseT = Response)(string userId, string delegateEmail) {
          auto result = new Delete!(RequestT, ResponseT)(userId, delegateEmail);
          initialize!(RequestT, ResponseT, Delete)(result);
          return result;
        }

        public class Delete
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}";

          /**
           * Removes the specified delegate (which can be of any verification status), and revokes any
           * verification that may have been required for using it. Note that a delegate user must be
           * referred to by their primary email address, and not an email alias. This method is only
           * available to service account clients that have been delegated domain-wide authority.
           *
           * Create a request for the method "delegates.delete".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param delegateEmail The email address of the user to be removed as a delegate.
           * @since 1.13
           */
          protected this(string userId, string delegateEmail) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.delegateEmail = enforce(delegateEmail, "Required parameter delegateEmail must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{delegateEmail}", delegateEmail);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Delete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Delete setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The email address of the user to be removed as a delegate. */
          private string delegateEmail;

          /** The email address of the user to be removed as a delegate.
           */
          public string getDelegateEmail() {
            return delegateEmail;
          }

          /** The email address of the user to be removed as a delegate. */
          public Delete setDelegateEmail(string delegateEmail) {
            this.delegateEmail = delegateEmail;
            return this;
          }

        }
        /**
         * Gets the specified delegate. Note that a delegate user must be referred to by their primary email
         * address, and not an email alias. This method is only available to service account clients that
         * have been delegated domain-wide authority.
         *
         * Create a request for the method "delegates.get".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param delegateEmail The email address of the user whose delegate relationship is to be retrieved.
         * @return the request
         */
        public auto get_(RequestT = Request, ResponseT = Response)(string userId, string delegateEmail) {
          auto result = new Get!(RequestT, ResponseT)(userId, delegateEmail);
          initialize!(RequestT, ResponseT, Get)(result);
          return result;
        }

        public class Get
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.Delegate.Delegate, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}";

          /**
           * Gets the specified delegate. Note that a delegate user must be referred to by their primary
           * email address, and not an email alias. This method is only available to service account clients
           * that have been delegated domain-wide authority.
           *
           * Create a request for the method "delegates.get".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param delegateEmail The email address of the user whose delegate relationship is to be retrieved.
           * @since 1.13
           */
          protected this(string userId, string delegateEmail) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.delegateEmail = enforce(delegateEmail, "Required parameter delegateEmail must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{delegateEmail}", delegateEmail);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Get setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The email address of the user whose delegate relationship is to be retrieved. */
          private string delegateEmail;

          /** The email address of the user whose delegate relationship is to be retrieved.
           */
          public string getDelegateEmail() {
            return delegateEmail;
          }

          /** The email address of the user whose delegate relationship is to be retrieved. */
          public Get setDelegateEmail(string delegateEmail) {
            this.delegateEmail = delegateEmail;
            return this;
          }

        }
        /**
         * Lists the delegates for the specified account. This method is only available to service account
         * clients that have been delegated domain-wide authority.
         *
         * Create a request for the method "delegates.list".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @return the request
         */
        public auto list_(RequestT = Request, ResponseT = Response)(string userId) {
          auto result = new List!(RequestT, ResponseT)(userId);
          initialize!(RequestT, ResponseT, List)(result);
          return result;
        }

        public class List
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListDelegatesResponse.ListDelegatesResponse, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/delegates";

          /**
           * Lists the delegates for the specified account. This method is only available to service account
           * clients that have been delegated domain-wide authority.
           *
           * Create a request for the method "delegates.list".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @since 1.13
           */
          protected this(string userId) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public List setUserId(string userId) {
            this.userId = userId;
            return this;
          }

        }

      }
      /**
       * An accessor for creating requests from the Filters collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Gmail gmail = new Gmail(...);}
       *   {@code Gmail.Filters.List request = gmail.filters().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Filters filters() {
        return new Filters();
      }

      /**
       * The "filters" collection of methods.
       */
      public class Filters {

        /**
         * Creates a filter. Note: you can only create a maximum of 1,000 filters.
         *
         * Create a request for the method "filters.create".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.Filter}
         * @return the request
         */
        public auto create_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.Filter.Filter content) {
          auto result = new Create!(RequestT, ResponseT)(userId, content);
          initialize!(RequestT, ResponseT, Create)(result);
          return result;
        }

        public class Create
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.Filter.Filter, Google.Apis.Gmail.v1.Data.Filter.Filter, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/filters";

          /**
           * Creates a filter. Note: you can only create a maximum of 1,000 filters.
           *
           * Create a request for the method "filters.create".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param content the {@link Google.Apis.Gmail.v1.Data.Filter}
           * @since 1.13
           */
          protected this(string userId, Google.Apis.Gmail.v1.Data.Filter.Filter content) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            super(restPath, DEFAULT_BASE_URL);
            this.content = content;
          }

          override {

            public Create!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Create setUserId(string userId) {
            this.userId = userId;
            return this;
          }

        }
        /**
         * Deletes a filter.
         *
         * Create a request for the method "filters.delete".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param id The ID of the filter to be deleted.
         * @return the request
         */
        public auto delete_(RequestT = Request, ResponseT = Response)(string userId, string id) {
          auto result = new Delete!(RequestT, ResponseT)(userId, id);
          initialize!(RequestT, ResponseT, Delete)(result);
          return result;
        }

        public class Delete
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/filters/{id}";

          /**
           * Deletes a filter.
           *
           * Create a request for the method "filters.delete".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param id The ID of the filter to be deleted.
           * @since 1.13
           */
          protected this(string userId, string id) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.id = enforce(id, "Required parameter id must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{id}", id);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Delete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Delete setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The ID of the filter to be deleted. */
          private string id;

          /** The ID of the filter to be deleted.
           */
          public string getId() {
            return id;
          }

          /** The ID of the filter to be deleted. */
          public Delete setId(string id) {
            this.id = id;
            return this;
          }

        }
        /**
         * Gets a filter.
         *
         * Create a request for the method "filters.get".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param id The ID of the filter to be fetched.
         * @return the request
         */
        public auto get_(RequestT = Request, ResponseT = Response)(string userId, string id) {
          auto result = new Get!(RequestT, ResponseT)(userId, id);
          initialize!(RequestT, ResponseT, Get)(result);
          return result;
        }

        public class Get
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.Filter.Filter, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/filters/{id}";

          /**
           * Gets a filter.
           *
           * Create a request for the method "filters.get".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param id The ID of the filter to be fetched.
           * @since 1.13
           */
          protected this(string userId, string id) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.id = enforce(id, "Required parameter id must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{id}", id);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Get setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The ID of the filter to be fetched. */
          private string id;

          /** The ID of the filter to be fetched.
           */
          public string getId() {
            return id;
          }

          /** The ID of the filter to be fetched. */
          public Get setId(string id) {
            this.id = id;
            return this;
          }

        }
        /**
         * Lists the message filters of a Gmail user.
         *
         * Create a request for the method "filters.list".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @return the request
         */
        public auto list_(RequestT = Request, ResponseT = Response)(string userId) {
          auto result = new List!(RequestT, ResponseT)(userId);
          initialize!(RequestT, ResponseT, List)(result);
          return result;
        }

        public class List
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListFiltersResponse.ListFiltersResponse, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/filters";

          /**
           * Lists the message filters of a Gmail user.
           *
           * Create a request for the method "filters.list".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @since 1.13
           */
          protected this(string userId) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public List setUserId(string userId) {
            this.userId = userId;
            return this;
          }

        }

      }
      /**
       * An accessor for creating requests from the ForwardingAddresses collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Gmail gmail = new Gmail(...);}
       *   {@code Gmail.ForwardingAddresses.List request = gmail.forwardingAddresses().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public ForwardingAddresses forwardingAddresses() {
        return new ForwardingAddresses();
      }

      /**
       * The "forwardingAddresses" collection of methods.
       */
      public class ForwardingAddresses {

        /**
         * Creates a forwarding address. If ownership verification is required, a message will be sent to
         * the recipient and the resource's verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to `accepted`. This method is only
         * available to service account clients that have been delegated domain-wide authority.
         *
         * Create a request for the method "forwardingAddresses.create".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.ForwardingAddress}
         * @return the request
         */
        public auto create_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.ForwardingAddress.ForwardingAddress content) {
          auto result = new Create!(RequestT, ResponseT)(userId, content);
          initialize!(RequestT, ResponseT, Create)(result);
          return result;
        }

        public class Create
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.ForwardingAddress.ForwardingAddress, Google.Apis.Gmail.v1.Data.ForwardingAddress.ForwardingAddress, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/forwardingAddresses";

          /**
           * Creates a forwarding address. If ownership verification is required, a message will be sent to
           * the recipient and the resource's verification status will be set to `pending`; otherwise, the
           * resource will be created with verification status set to `accepted`. This method is only
           * available to service account clients that have been delegated domain-wide authority.
           *
           * Create a request for the method "forwardingAddresses.create".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param content the {@link Google.Apis.Gmail.v1.Data.ForwardingAddress}
           * @since 1.13
           */
          protected this(string userId, Google.Apis.Gmail.v1.Data.ForwardingAddress.ForwardingAddress content) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            super(restPath, DEFAULT_BASE_URL);
            this.content = content;
          }

          override {

            public Create!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Create setUserId(string userId) {
            this.userId = userId;
            return this;
          }

        }
        /**
         * Deletes the specified forwarding address and revokes any verification that may have been
         * required. This method is only available to service account clients that have been delegated
         * domain-wide authority.
         *
         * Create a request for the method "forwardingAddresses.delete".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param forwardingEmail The forwarding address to be deleted.
         * @return the request
         */
        public auto delete_(RequestT = Request, ResponseT = Response)(string userId, string forwardingEmail) {
          auto result = new Delete!(RequestT, ResponseT)(userId, forwardingEmail);
          initialize!(RequestT, ResponseT, Delete)(result);
          return result;
        }

        public class Delete
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}";

          /**
           * Deletes the specified forwarding address and revokes any verification that may have been
           * required. This method is only available to service account clients that have been delegated
           * domain-wide authority.
           *
           * Create a request for the method "forwardingAddresses.delete".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param forwardingEmail The forwarding address to be deleted.
           * @since 1.13
           */
          protected this(string userId, string forwardingEmail) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.forwardingEmail = enforce(forwardingEmail, "Required parameter forwardingEmail must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{forwardingEmail}", forwardingEmail);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Delete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Delete setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The forwarding address to be deleted. */
          private string forwardingEmail;

          /** The forwarding address to be deleted.
           */
          public string getForwardingEmail() {
            return forwardingEmail;
          }

          /** The forwarding address to be deleted. */
          public Delete setForwardingEmail(string forwardingEmail) {
            this.forwardingEmail = forwardingEmail;
            return this;
          }

        }
        /**
         * Gets the specified forwarding address.
         *
         * Create a request for the method "forwardingAddresses.get".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param forwardingEmail The forwarding address to be retrieved.
         * @return the request
         */
        public auto get_(RequestT = Request, ResponseT = Response)(string userId, string forwardingEmail) {
          auto result = new Get!(RequestT, ResponseT)(userId, forwardingEmail);
          initialize!(RequestT, ResponseT, Get)(result);
          return result;
        }

        public class Get
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ForwardingAddress.ForwardingAddress, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}";

          /**
           * Gets the specified forwarding address.
           *
           * Create a request for the method "forwardingAddresses.get".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param forwardingEmail The forwarding address to be retrieved.
           * @since 1.13
           */
          protected this(string userId, string forwardingEmail) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.forwardingEmail = enforce(forwardingEmail, "Required parameter forwardingEmail must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{forwardingEmail}", forwardingEmail);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Get setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The forwarding address to be retrieved. */
          private string forwardingEmail;

          /** The forwarding address to be retrieved.
           */
          public string getForwardingEmail() {
            return forwardingEmail;
          }

          /** The forwarding address to be retrieved. */
          public Get setForwardingEmail(string forwardingEmail) {
            this.forwardingEmail = forwardingEmail;
            return this;
          }

        }
        /**
         * Lists the forwarding addresses for the specified account.
         *
         * Create a request for the method "forwardingAddresses.list".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @return the request
         */
        public auto list_(RequestT = Request, ResponseT = Response)(string userId) {
          auto result = new List!(RequestT, ResponseT)(userId);
          initialize!(RequestT, ResponseT, List)(result);
          return result;
        }

        public class List
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListForwardingAddressesResponse.ListForwardingAddressesResponse, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/forwardingAddresses";

          /**
           * Lists the forwarding addresses for the specified account.
           *
           * Create a request for the method "forwardingAddresses.list".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @since 1.13
           */
          protected this(string userId) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public List setUserId(string userId) {
            this.userId = userId;
            return this;
          }

        }

      }
      /**
       * An accessor for creating requests from the SendAs collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Gmail gmail = new Gmail(...);}
       *   {@code Gmail.SendAs.List request = gmail.sendAs().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public SendAs sendAs() {
        return new SendAs();
      }

      /**
       * The "sendAs" collection of methods.
       */
      public class SendAs {

        /**
         * Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect
         * to the SMTP service to validate the configuration before creating the alias. If ownership
         * verification is required for the alias, a message will be sent to the email address and the
         * resource's verification status will be set to `pending`; otherwise, the resource will be created
         * with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias. This method is only available to service account clients
         * that have been delegated domain-wide authority.
         *
         * Create a request for the method "sendAs.create".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param content the {@link Google.Apis.Gmail.v1.Data.SendAs}
         * @return the request
         */
        public auto create_(RequestT = Request, ResponseT = Response)(string userId, Google.Apis.Gmail.v1.Data.SendAs.SendAs content) {
          auto result = new Create!(RequestT, ResponseT)(userId, content);
          initialize!(RequestT, ResponseT, Create)(result);
          return result;
        }

        public class Create
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.SendAs.SendAs, Google.Apis.Gmail.v1.Data.SendAs.SendAs, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs";

          /**
           * Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail will attempt to
           * connect to the SMTP service to validate the configuration before creating the alias. If
           * ownership verification is required for the alias, a message will be sent to the email address
           * and the resource's verification status will be set to `pending`; otherwise, the resource will
           * be created with verification status set to `accepted`. If a signature is provided, Gmail will
           * sanitize the HTML before saving it with the alias. This method is only available to service
           * account clients that have been delegated domain-wide authority.
           *
           * Create a request for the method "sendAs.create".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param content the {@link Google.Apis.Gmail.v1.Data.SendAs}
           * @since 1.13
           */
          protected this(string userId, Google.Apis.Gmail.v1.Data.SendAs.SendAs content) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            super(restPath, DEFAULT_BASE_URL);
            this.content = content;
          }

          override {

            public Create!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Create!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Create setUserId(string userId) {
            this.userId = userId;
            return this;
          }

        }
        /**
         * Deletes the specified send-as alias. Revokes any verification that may have been required for
         * using it. This method is only available to service account clients that have been delegated
         * domain-wide authority.
         *
         * Create a request for the method "sendAs.delete".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param sendAsEmail The send-as alias to be deleted.
         * @return the request
         */
        public auto delete_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail) {
          auto result = new Delete!(RequestT, ResponseT)(userId, sendAsEmail);
          initialize!(RequestT, ResponseT, Delete)(result);
          return result;
        }

        public class Delete
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}";

          /**
           * Deletes the specified send-as alias. Revokes any verification that may have been required for
           * using it. This method is only available to service account clients that have been delegated
           * domain-wide authority.
           *
           * Create a request for the method "sendAs.delete".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param sendAsEmail The send-as alias to be deleted.
           * @since 1.13
           */
          protected this(string userId, string sendAsEmail) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Delete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Delete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Delete setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The send-as alias to be deleted. */
          private string sendAsEmail;

          /** The send-as alias to be deleted.
           */
          public string getSendAsEmail() {
            return sendAsEmail;
          }

          /** The send-as alias to be deleted. */
          public Delete setSendAsEmail(string sendAsEmail) {
            this.sendAsEmail = sendAsEmail;
            return this;
          }

        }
        /**
         * Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a
         * member of the collection.
         *
         * Create a request for the method "sendAs.get".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param sendAsEmail The send-as alias to be retrieved.
         * @return the request
         */
        public auto get_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail) {
          auto result = new Get!(RequestT, ResponseT)(userId, sendAsEmail);
          initialize!(RequestT, ResponseT, Get)(result);
          return result;
        }

        public class Get
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.SendAs.SendAs, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}";

          /**
           * Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not
           * a member of the collection.
           *
           * Create a request for the method "sendAs.get".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param sendAsEmail The send-as alias to be retrieved.
           * @since 1.13
           */
          protected this(string userId, string sendAsEmail) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Get setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The send-as alias to be retrieved. */
          private string sendAsEmail;

          /** The send-as alias to be retrieved.
           */
          public string getSendAsEmail() {
            return sendAsEmail;
          }

          /** The send-as alias to be retrieved. */
          public Get setSendAsEmail(string sendAsEmail) {
            this.sendAsEmail = sendAsEmail;
            return this;
          }

        }
        /**
         * Lists the send-as aliases for the specified account. The result includes the primary send-as
         * address associated with the account as well as any custom "from" aliases.
         *
         * Create a request for the method "sendAs.list".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @return the request
         */
        public auto list_(RequestT = Request, ResponseT = Response)(string userId) {
          auto result = new List!(RequestT, ResponseT)(userId);
          initialize!(RequestT, ResponseT, List)(result);
          return result;
        }

        public class List
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListSendAsResponse.ListSendAsResponse, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs";

          /**
           * Lists the send-as aliases for the specified account. The result includes the primary send-as
           * address associated with the account as well as any custom "from" aliases.
           *
           * Create a request for the method "sendAs.list".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @since 1.13
           */
          protected this(string userId) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public List setUserId(string userId) {
            this.userId = userId;
            return this;
          }

        }
        /**
         * Patch the specified send-as alias.
         *
         * Create a request for the method "sendAs.patch".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param sendAsEmail The send-as alias to be updated.
         * @param content the {@link Google.Apis.Gmail.v1.Data.SendAs}
         * @return the request
         */
        public auto patch_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail, Google.Apis.Gmail.v1.Data.SendAs.SendAs content) {
          auto result = new Patch!(RequestT, ResponseT)(userId, sendAsEmail, content);
          initialize!(RequestT, ResponseT, Patch)(result);
          return result;
        }

        public class Patch
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "PATCH", Google.Apis.Gmail.v1.Data.SendAs.SendAs, Google.Apis.Gmail.v1.Data.SendAs.SendAs, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}";

          /**
           * Patch the specified send-as alias.
           *
           * Create a request for the method "sendAs.patch".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param sendAsEmail The send-as alias to be updated.
           * @param content the {@link Google.Apis.Gmail.v1.Data.SendAs}
           * @since 1.13
           */
          protected this(string userId, string sendAsEmail, Google.Apis.Gmail.v1.Data.SendAs.SendAs content) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
            super(restPath, DEFAULT_BASE_URL);
            this.content = content;
          }

          override {

            public Patch!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Patch!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Patch!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Patch setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The send-as alias to be updated. */
          private string sendAsEmail;

          /** The send-as alias to be updated.
           */
          public string getSendAsEmail() {
            return sendAsEmail;
          }

          /** The send-as alias to be updated. */
          public Patch setSendAsEmail(string sendAsEmail) {
            this.sendAsEmail = sendAsEmail;
            return this;
          }

        }
        /**
         * Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving
         * it with the alias. Addresses other than the primary address for the account can only be updated
         * by service account clients that have been delegated domain-wide authority.
         *
         * Create a request for the method "sendAs.update".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Update#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param sendAsEmail The send-as alias to be updated.
         * @param content the {@link Google.Apis.Gmail.v1.Data.SendAs}
         * @return the request
         */
        public auto update_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail, Google.Apis.Gmail.v1.Data.SendAs.SendAs content) {
          auto result = new Update!(RequestT, ResponseT)(userId, sendAsEmail, content);
          initialize!(RequestT, ResponseT, Update)(result);
          return result;
        }

        public class Update
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "PUT", Google.Apis.Gmail.v1.Data.SendAs.SendAs, Google.Apis.Gmail.v1.Data.SendAs.SendAs, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}";

          /**
           * Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving
           * it with the alias. Addresses other than the primary address for the account can only be updated
           * by service account clients that have been delegated domain-wide authority.
           *
           * Create a request for the method "sendAs.update".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
           * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param sendAsEmail The send-as alias to be updated.
           * @param content the {@link Google.Apis.Gmail.v1.Data.SendAs}
           * @since 1.13
           */
          protected this(string userId, string sendAsEmail, Google.Apis.Gmail.v1.Data.SendAs.SendAs content) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
            super(restPath, DEFAULT_BASE_URL);
            this.content = content;
          }

          override {

            public Update!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Update!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Update setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The send-as alias to be updated. */
          private string sendAsEmail;

          /** The send-as alias to be updated.
           */
          public string getSendAsEmail() {
            return sendAsEmail;
          }

          /** The send-as alias to be updated. */
          public Update setSendAsEmail(string sendAsEmail) {
            this.sendAsEmail = sendAsEmail;
            return this;
          }

        }
        /**
         * Sends a verification email to the specified send-as alias address. The verification status must
         * be `pending`. This method is only available to service account clients that have been delegated
         * domain-wide authority.
         *
         * Create a request for the method "sendAs.verify".
         *
         * This request holds the parameters needed by the gmail server.  After setting any optional
         * parameters, call the {@link Verify#execute()} method to invoke the remote operation.
         *
         * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
         * @param sendAsEmail The send-as alias to be verified.
         * @return the request
         */
        public auto verify_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail) {
          auto result = new Verify!(RequestT, ResponseT)(userId, sendAsEmail);
          initialize!(RequestT, ResponseT, Verify)(result);
          return result;
        }

        public class Verify
          (RequestT = Request, ResponseT = Response, MediaContentType = string) :
          GmailRequest!(RequestT, ResponseT, "POST", Object, Object, MediaContentType) {
          private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify";

          /**
           * Sends a verification email to the specified send-as alias address. The verification status must
           * be `pending`. This method is only available to service account clients that have been delegated
           * domain-wide authority.
           *
           * Create a request for the method "sendAs.verify".
           *
           * This request holds the parameters needed by the the gmail server.  After setting any optional
           * parameters, call the {@link Verify#execute()} method to invoke the remote operation. <p> {@link
           * Verify#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId User's email address. The special value "me" can be used to indicate the authenticated user.
         *        [default: me]
           * @param sendAsEmail The send-as alias to be verified.
           * @since 1.13
           */
          protected this(string userId, string sendAsEmail) {
            this.userId = enforce(userId, "Required parameter userId must be specified.");
            this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");

            string restPath = REST_PATH;
            restPath = restPath.replace("{userId}", userId);
            restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
            super(restPath, DEFAULT_BASE_URL);
          }

          override {

            public Verify!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setKey(string key) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
            }
            public Verify!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
              return cast(Verify!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
            }
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          private string userId;

          /** User's email address. The special value "me" can be used to indicate the authenticated user.
         [default: me]
           */
          public string getUserId() {
            return userId;
          }

          /**
           * User's email address. The special value "me" can be used to indicate the authenticated
           * user.
           */
          public Verify setUserId(string userId) {
            this.userId = userId;
            return this;
          }

          /** The send-as alias to be verified. */
          private string sendAsEmail;

          /** The send-as alias to be verified.
           */
          public string getSendAsEmail() {
            return sendAsEmail;
          }

          /** The send-as alias to be verified. */
          public Verify setSendAsEmail(string sendAsEmail) {
            this.sendAsEmail = sendAsEmail;
            return this;
          }

        }

        /**
         * An accessor for creating requests from the SmimeInfo collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Gmail gmail = new Gmail(...);}
         *   {@code Gmail.SmimeInfo.List request = gmail.smimeInfo().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public SmimeInfo smimeInfo() {
          return new SmimeInfo();
        }

        /**
         * The "smimeInfo" collection of methods.
         */
        public class SmimeInfo {

          /**
           * Deletes the specified S/MIME config for the specified send-as alias.
           *
           * Create a request for the method "smimeInfo.delete".
           *
           * This request holds the parameters needed by the gmail server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
           * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
           * @param id The immutable ID for the SmimeInfo.
           * @return the request
           */
          public auto delete_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail, string id) {
            auto result = new Delete!(RequestT, ResponseT)(userId, sendAsEmail, id);
            initialize!(RequestT, ResponseT, Delete)(result);
            return result;
          }

          public class Delete
            (RequestT = Request, ResponseT = Response, MediaContentType = string) :
            GmailRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
            private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}";

            /**
             * Deletes the specified S/MIME config for the specified send-as alias.
             *
             * Create a request for the method "smimeInfo.delete".
             *
             * This request holds the parameters needed by the the gmail server.  After setting any optional
             * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
             * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
             * @param id The immutable ID for the SmimeInfo.
             * @since 1.13
             */
            protected this(string userId, string sendAsEmail, string id) {
              this.userId = enforce(userId, "Required parameter userId must be specified.");
              this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");
              this.id = enforce(id, "Required parameter id must be specified.");

              string restPath = REST_PATH;
              restPath = restPath.replace("{userId}", userId);
              restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
              restPath = restPath.replace("{id}", id);
              super(restPath, DEFAULT_BASE_URL);
            }

            override {

              public Delete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
              }
              public Delete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
                return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
              }
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            private string userId;

            /** The user's email address. The special value `me` can be used to indicate the authenticated user.
           [default: me]
             */
            public string getUserId() {
              return userId;
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            public Delete setUserId(string userId) {
              this.userId = userId;
              return this;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            private string sendAsEmail;

            /** The email address that appears in the "From:" header for mail sent using this alias.
             */
            public string getSendAsEmail() {
              return sendAsEmail;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            public Delete setSendAsEmail(string sendAsEmail) {
              this.sendAsEmail = sendAsEmail;
              return this;
            }

            /** The immutable ID for the SmimeInfo. */
            private string id;

            /** The immutable ID for the SmimeInfo.
             */
            public string getId() {
              return id;
            }

            /** The immutable ID for the SmimeInfo. */
            public Delete setId(string id) {
              this.id = id;
              return this;
            }

          }
          /**
           * Gets the specified S/MIME config for the specified send-as alias.
           *
           * Create a request for the method "smimeInfo.get".
           *
           * This request holds the parameters needed by the gmail server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
           * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
           * @param id The immutable ID for the SmimeInfo.
           * @return the request
           */
          public auto get_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail, string id) {
            auto result = new Get!(RequestT, ResponseT)(userId, sendAsEmail, id);
            initialize!(RequestT, ResponseT, Get)(result);
            return result;
          }

          public class Get
            (RequestT = Request, ResponseT = Response, MediaContentType = string) :
            GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.SmimeInfo.SmimeInfo, MediaContentType) {
            private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}";

            /**
             * Gets the specified S/MIME config for the specified send-as alias.
             *
             * Create a request for the method "smimeInfo.get".
             *
             * This request holds the parameters needed by the the gmail server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
             * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
             * @param id The immutable ID for the SmimeInfo.
             * @since 1.13
             */
            protected this(string userId, string sendAsEmail, string id) {
              this.userId = enforce(userId, "Required parameter userId must be specified.");
              this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");
              this.id = enforce(id, "Required parameter id must be specified.");

              string restPath = REST_PATH;
              restPath = restPath.replace("{userId}", userId);
              restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
              restPath = restPath.replace("{id}", id);
              super(restPath, DEFAULT_BASE_URL);
            }

            override {

              public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
              }
              public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
                return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
              }
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            private string userId;

            /** The user's email address. The special value `me` can be used to indicate the authenticated user.
           [default: me]
             */
            public string getUserId() {
              return userId;
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            public Get setUserId(string userId) {
              this.userId = userId;
              return this;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            private string sendAsEmail;

            /** The email address that appears in the "From:" header for mail sent using this alias.
             */
            public string getSendAsEmail() {
              return sendAsEmail;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            public Get setSendAsEmail(string sendAsEmail) {
              this.sendAsEmail = sendAsEmail;
              return this;
            }

            /** The immutable ID for the SmimeInfo. */
            private string id;

            /** The immutable ID for the SmimeInfo.
             */
            public string getId() {
              return id;
            }

            /** The immutable ID for the SmimeInfo. */
            public Get setId(string id) {
              this.id = id;
              return this;
            }

          }
          /**
           * Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format
           * is required for the key.
           *
           * Create a request for the method "smimeInfo.insert".
           *
           * This request holds the parameters needed by the gmail server.  After setting any optional
           * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
           *
           * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
           * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
           * @param content the {@link Google.Apis.Gmail.v1.Data.SmimeInfo}
           * @return the request
           */
          public auto insert_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail, Google.Apis.Gmail.v1.Data.SmimeInfo.SmimeInfo content) {
            auto result = new Insert!(RequestT, ResponseT)(userId, sendAsEmail, content);
            initialize!(RequestT, ResponseT, Insert)(result);
            return result;
          }

          public class Insert
            (RequestT = Request, ResponseT = Response, MediaContentType = string) :
            GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.SmimeInfo.SmimeInfo, Google.Apis.Gmail.v1.Data.SmimeInfo.SmimeInfo, MediaContentType) {
            private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo";

            /**
             * Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12
             * format is required for the key.
             *
             * Create a request for the method "smimeInfo.insert".
             *
             * This request holds the parameters needed by the the gmail server.  After setting any optional
             * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
             * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
             * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
             * @param content the {@link Google.Apis.Gmail.v1.Data.SmimeInfo}
             * @since 1.13
             */
            protected this(string userId, string sendAsEmail, Google.Apis.Gmail.v1.Data.SmimeInfo.SmimeInfo content) {
              this.userId = enforce(userId, "Required parameter userId must be specified.");
              this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");

              string restPath = REST_PATH;
              restPath = restPath.replace("{userId}", userId);
              restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
              super(restPath, DEFAULT_BASE_URL);
              this.content = content;
            }

            override {

              public Insert!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setKey(string key) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
              }
              public Insert!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
                return cast(Insert!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
              }
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            private string userId;

            /** The user's email address. The special value `me` can be used to indicate the authenticated user.
           [default: me]
             */
            public string getUserId() {
              return userId;
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            public Insert setUserId(string userId) {
              this.userId = userId;
              return this;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            private string sendAsEmail;

            /** The email address that appears in the "From:" header for mail sent using this alias.
             */
            public string getSendAsEmail() {
              return sendAsEmail;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            public Insert setSendAsEmail(string sendAsEmail) {
              this.sendAsEmail = sendAsEmail;
              return this;
            }

          }
          /**
           * Lists S/MIME configs for the specified send-as alias.
           *
           * Create a request for the method "smimeInfo.list".
           *
           * This request holds the parameters needed by the gmail server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
           * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
           * @return the request
           */
          public auto list_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail) {
            auto result = new List!(RequestT, ResponseT)(userId, sendAsEmail);
            initialize!(RequestT, ResponseT, List)(result);
            return result;
          }

          public class List
            (RequestT = Request, ResponseT = Response, MediaContentType = string) :
            GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListSmimeInfoResponse.ListSmimeInfoResponse, MediaContentType) {
            private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo";

            /**
             * Lists S/MIME configs for the specified send-as alias.
             *
             * Create a request for the method "smimeInfo.list".
             *
             * This request holds the parameters needed by the the gmail server.  After setting any optional
             * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
             * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
             * @since 1.13
             */
            protected this(string userId, string sendAsEmail) {
              this.userId = enforce(userId, "Required parameter userId must be specified.");
              this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");

              string restPath = REST_PATH;
              restPath = restPath.replace("{userId}", userId);
              restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
              super(restPath, DEFAULT_BASE_URL);
            }

            override {

              public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
              }
              public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
              }
              public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
              }
              public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
              }
              public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
              }
              public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
              }
              public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
              }
              public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
              }
              public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
              }
              public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
              }
              public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
                return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
              }
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            private string userId;

            /** The user's email address. The special value `me` can be used to indicate the authenticated user.
           [default: me]
             */
            public string getUserId() {
              return userId;
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            public List setUserId(string userId) {
              this.userId = userId;
              return this;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            private string sendAsEmail;

            /** The email address that appears in the "From:" header for mail sent using this alias.
             */
            public string getSendAsEmail() {
              return sendAsEmail;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            public List setSendAsEmail(string sendAsEmail) {
              this.sendAsEmail = sendAsEmail;
              return this;
            }

          }
          /**
           * Sets the default S/MIME config for the specified send-as alias.
           *
           * Create a request for the method "smimeInfo.setDefault".
           *
           * This request holds the parameters needed by the gmail server.  After setting any optional
           * parameters, call the {@link SetDefault#execute()} method to invoke the remote operation.
           *
           * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
           * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
           * @param id The immutable ID for the SmimeInfo.
           * @return the request
           */
          public auto setDefault_(RequestT = Request, ResponseT = Response)(string userId, string sendAsEmail, string id) {
            auto result = new SetDefault!(RequestT, ResponseT)(userId, sendAsEmail, id);
            initialize!(RequestT, ResponseT, SetDefault)(result);
            return result;
          }

          public class SetDefault
            (RequestT = Request, ResponseT = Response, MediaContentType = string) :
            GmailRequest!(RequestT, ResponseT, "POST", Object, Object, MediaContentType) {
            private static const string REST_PATH = "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault";

            /**
             * Sets the default S/MIME config for the specified send-as alias.
             *
             * Create a request for the method "smimeInfo.setDefault".
             *
             * This request holds the parameters needed by the the gmail server.  After setting any optional
             * parameters, call the {@link SetDefault#execute()} method to invoke the remote operation. <p>
             * {@link
             * SetDefault#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
           *        [default: me]
             * @param sendAsEmail The email address that appears in the "From:" header for mail sent using this alias.
             * @param id The immutable ID for the SmimeInfo.
             * @since 1.13
             */
            protected this(string userId, string sendAsEmail, string id) {
              this.userId = enforce(userId, "Required parameter userId must be specified.");
              this.sendAsEmail = enforce(sendAsEmail, "Required parameter sendAsEmail must be specified.");
              this.id = enforce(id, "Required parameter id must be specified.");

              string restPath = REST_PATH;
              restPath = restPath.replace("{userId}", userId);
              restPath = restPath.replace("{sendAsEmail}", sendAsEmail);
              restPath = restPath.replace("{id}", id);
              super(restPath, DEFAULT_BASE_URL);
            }

            override {

              public SetDefault!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setKey(string key) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
              }
              public SetDefault!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
                return cast(SetDefault!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
              }
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            private string userId;

            /** The user's email address. The special value `me` can be used to indicate the authenticated user.
           [default: me]
             */
            public string getUserId() {
              return userId;
            }

            /**
             * The user's email address. The special value `me` can be used to indicate the
             * authenticated user.
             */
            public SetDefault setUserId(string userId) {
              this.userId = userId;
              return this;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            private string sendAsEmail;

            /** The email address that appears in the "From:" header for mail sent using this alias.
             */
            public string getSendAsEmail() {
              return sendAsEmail;
            }

            /**
             * The email address that appears in the "From:" header for mail sent using this alias.
             */
            public SetDefault setSendAsEmail(string sendAsEmail) {
              this.sendAsEmail = sendAsEmail;
              return this;
            }

            /** The immutable ID for the SmimeInfo. */
            private string id;

            /** The immutable ID for the SmimeInfo.
             */
            public string getId() {
              return id;
            }

            /** The immutable ID for the SmimeInfo. */
            public SetDefault setId(string id) {
              this.id = id;
              return this;
            }

          }

        }
      }
    }
    /**
     * An accessor for creating requests from the Threads collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Gmail gmail = new Gmail(...);}
     *   {@code Gmail.Threads.List request = gmail.threads().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Threads threads() {
      return new Threads();
    }

    /**
     * The "threads" collection of methods.
     */
    public class Threads {

      /**
       * Immediately and permanently deletes the specified thread. This operation cannot be undone. Prefer
       * `threads.trash` instead.
       *
       * Create a request for the method "threads.delete".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id ID of the Thread to delete.
       * @return the request
       */
      public auto delete_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Delete!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Delete)(result);
        return result;
      }

      public class Delete
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/threads/{id}";

        /**
         * Immediately and permanently deletes the specified thread. This operation cannot be undone.
         * Prefer `threads.trash` instead.
         *
         * Create a request for the method "threads.delete".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id ID of the Thread to delete.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Delete!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Delete!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Delete setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** ID of the Thread to delete. */
        private string id;

        /** ID of the Thread to delete.
         */
        public string getId() {
          return id;
        }

        /** ID of the Thread to delete. */
        public Delete setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Gets the specified thread.
       *
       * Create a request for the method "threads.get".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the thread to retrieve.
       * @return the request
       */
      public auto get_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Get!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Get)(result);
        return result;
      }

      public class Get
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.Thread.Thread, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/threads/{id}";

        /**
         * Gets the specified thread.
         *
         * Create a request for the method "threads.get".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the thread to retrieve.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Get!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Get!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Get setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the thread to retrieve. */
        private string id;

        /** The ID of the thread to retrieve.
         */
        public string getId() {
          return id;
        }

        /** The ID of the thread to retrieve. */
        public Get setId(string id) {
          this.id = id;
          return this;
        }

        /** The format to return the messages in. */
        private string format;

        /** The format to return the messages in. [default: full]
         */
        public string getFormat() {
          return format;
        }

        /** The format to return the messages in. */
        public Get setFormat(string format) {
          this.format = format;
          set!(string)("format", format);
          return this;
        }

        /** When given and format is METADATA, only include headers specified. */
        private string[] metadataHeaders;

        /** When given and format is METADATA, only include headers specified.
         */
        public string[] getMetadataHeaders() {
          return metadataHeaders;
        }

        /** When given and format is METADATA, only include headers specified. */
        public Get setMetadataHeaders(string[] metadataHeaders) {
          this.metadataHeaders = metadataHeaders;
          set!(string[])("metadataHeaders", metadataHeaders);
          return this;
        }

      }
      /**
       * Lists the threads in the user's mailbox.
       *
       * Create a request for the method "threads.list".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @return the request
       */
      public auto list_(RequestT = Request, ResponseT = Response)(string userId) {
        auto result = new List!(RequestT, ResponseT)(userId);
        initialize!(RequestT, ResponseT, List)(result);
        return result;
      }

      public class List
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Gmail.v1.Data.ListThreadsResponse.ListThreadsResponse, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/threads";

        /**
         * Lists the threads in the user's mailbox.
         *
         * Create a request for the method "threads.list".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @since 1.13
         */
        protected this(string userId) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public List!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public List!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public List!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public List setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** Include threads from `SPAM` and `TRASH` in the results. */
        private Nullable!bool includeSpamTrash;

        /** Include threads from `SPAM` and `TRASH` in the results. [default: false]
         */
        public Nullable!bool getIncludeSpamTrash() {
          return includeSpamTrash;
        }

        /** Include threads from `SPAM` and `TRASH` in the results. */
        public List setIncludeSpamTrash(Nullable!bool includeSpamTrash) {
          this.includeSpamTrash = includeSpamTrash;
          set!(Nullable!bool)("includeSpamTrash", includeSpamTrash);
          return this;
        }

        /** Only return threads with labels that match all of the specified label IDs. */
        private string[] labelIds;

        /** Only return threads with labels that match all of the specified label IDs.
         */
        public string[] getLabelIds() {
          return labelIds;
        }

        /** Only return threads with labels that match all of the specified label IDs. */
        public List setLabelIds(string[] labelIds) {
          this.labelIds = labelIds;
          set!(string[])("labelIds", labelIds);
          return this;
        }

        /**
         * Maximum number of threads to return. This field defaults to 100. The maximum allowed
         * value for this field is 500.
         */
        private Nullable!long maxResults;

        /** Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this
       field is 500. [default: 100]
         */
        public Nullable!long getMaxResults() {
          return maxResults;
        }

        /**
         * Maximum number of threads to return. This field defaults to 100. The maximum allowed
         * value for this field is 500.
         */
        public List setMaxResults(Nullable!long maxResults) {
          this.maxResults = maxResults;
          set!(Nullable!long)("maxResults", maxResults);
          return this;
        }

        /** Page token to retrieve a specific page of results in the list. */
        private string pageToken;

        /** Page token to retrieve a specific page of results in the list.
         */
        public string getPageToken() {
          return pageToken;
        }

        /** Page token to retrieve a specific page of results in the list. */
        public List setPageToken(string pageToken) {
          this.pageToken = pageToken;
          set!(string)("pageToken", pageToken);
          return this;
        }

        /**
         * Only return threads matching the specified query. Supports the same query format as the
         * Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
         * Parameter cannot be used when accessing the api using the gmail.metadata scope.
         */
        private string q;

        /** Only return threads matching the specified query. Supports the same query format as the Gmail
       search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be
       used when accessing the api using the gmail.metadata scope.
         */
        public string getQ() {
          return q;
        }

        /**
         * Only return threads matching the specified query. Supports the same query format as the
         * Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
         * Parameter cannot be used when accessing the api using the gmail.metadata scope.
         */
        public List setQ(string q) {
          this.q = q;
          set!(string)("q", q);
          return this;
        }

      }
      /**
       * Modifies the labels applied to the thread. This applies to all messages in the thread.
       *
       * Create a request for the method "threads.modify".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Modify#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the thread to modify.
       * @param content the {@link Google.Apis.Gmail.v1.Data.ModifyThreadRequest}
       * @return the request
       */
      public auto modify_(RequestT = Request, ResponseT = Response)(string userId, string id, Google.Apis.Gmail.v1.Data.ModifyThreadRequest.ModifyThreadRequest content) {
        auto result = new Modify!(RequestT, ResponseT)(userId, id, content);
        initialize!(RequestT, ResponseT, Modify)(result);
        return result;
      }

      public class Modify
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Google.Apis.Gmail.v1.Data.ModifyThreadRequest.ModifyThreadRequest, Google.Apis.Gmail.v1.Data.Thread.Thread, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/threads/{id}/modify";

        /**
         * Modifies the labels applied to the thread. This applies to all messages in the thread.
         *
         * Create a request for the method "threads.modify".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Modify#execute()} method to invoke the remote operation. <p> {@link
         * Modify#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the thread to modify.
         * @param content the {@link Google.Apis.Gmail.v1.Data.ModifyThreadRequest}
         * @since 1.13
         */
        protected this(string userId, string id, Google.Apis.Gmail.v1.Data.ModifyThreadRequest.ModifyThreadRequest content) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
          this.content = content;
        }

        override {

          public Modify!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Modify!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Modify!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Modify setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the thread to modify. */
        private string id;

        /** The ID of the thread to modify.
         */
        public string getId() {
          return id;
        }

        /** The ID of the thread to modify. */
        public Modify setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Moves the specified thread to the trash.
       *
       * Create a request for the method "threads.trash".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Trash#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the thread to Trash.
       * @return the request
       */
      public auto trash_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Trash!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Trash)(result);
        return result;
      }

      public class Trash
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Object, Google.Apis.Gmail.v1.Data.Thread.Thread, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/threads/{id}/trash";

        /**
         * Moves the specified thread to the trash.
         *
         * Create a request for the method "threads.trash".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Trash#execute()} method to invoke the remote operation. <p> {@link
         * Trash#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the thread to Trash.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Trash!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Trash!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Trash!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Trash setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the thread to Trash. */
        private string id;

        /** The ID of the thread to Trash.
         */
        public string getId() {
          return id;
        }

        /** The ID of the thread to Trash. */
        public Trash setId(string id) {
          this.id = id;
          return this;
        }

      }
      /**
       * Removes the specified thread from the trash.
       *
       * Create a request for the method "threads.untrash".
       *
       * This request holds the parameters needed by the gmail server.  After setting any optional
       * parameters, call the {@link Untrash#execute()} method to invoke the remote operation.
       *
       * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
       * @param id The ID of the thread to remove from Trash.
       * @return the request
       */
      public auto untrash_(RequestT = Request, ResponseT = Response)(string userId, string id) {
        auto result = new Untrash!(RequestT, ResponseT)(userId, id);
        initialize!(RequestT, ResponseT, Untrash)(result);
        return result;
      }

      public class Untrash
        (RequestT = Request, ResponseT = Response, MediaContentType = string) :
        GmailRequest!(RequestT, ResponseT, "POST", Object, Google.Apis.Gmail.v1.Data.Thread.Thread, MediaContentType) {
        private static const string REST_PATH = "gmail/v1/users/{userId}/threads/{id}/untrash";

        /**
         * Removes the specified thread from the trash.
         *
         * Create a request for the method "threads.untrash".
         *
         * This request holds the parameters needed by the the gmail server.  After setting any optional
         * parameters, call the {@link Untrash#execute()} method to invoke the remote operation. <p>
         * {@link
         * Untrash#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId The user's email address. The special value `me` can be used to indicate the authenticated user.
       *        [default: me]
         * @param id The ID of the thread to remove from Trash.
         * @since 1.13
         */
        protected this(string userId, string id) {
          this.userId = enforce(userId, "Required parameter userId must be specified.");
          this.id = enforce(id, "Required parameter id must be specified.");

          string restPath = REST_PATH;
          restPath = restPath.replace("{userId}", userId);
          restPath = restPath.replace("{id}", id);
          super(restPath, DEFAULT_BASE_URL);
        }

        override {

          public Untrash!(RequestT, ResponseT, MediaContentType) setXgafv(string xgafv) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setXgafv(xgafv);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setAccessToken(string accessToken) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setAccessToken(accessToken);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setCallback(string callback) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setCallback(callback);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setKey(string key) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setUploadType(string uploadType) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setUploadType(uploadType);
          }
          public Untrash!(RequestT, ResponseT, MediaContentType) setUploadProtocol(string uploadProtocol) {
            return cast(Untrash!(RequestT, ResponseT, MediaContentType)) super.setUploadProtocol(uploadProtocol);
          }
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        private string userId;

        /** The user's email address. The special value `me` can be used to indicate the authenticated user.
       [default: me]
         */
        public string getUserId() {
          return userId;
        }

        /**
         * The user's email address. The special value `me` can be used to indicate the
         * authenticated user.
         */
        public Untrash setUserId(string userId) {
          this.userId = userId;
          return this;
        }

        /** The ID of the thread to remove from Trash. */
        private string id;

        /** The ID of the thread to remove from Trash.
         */
        public string getId() {
          return id;
        }

        /** The ID of the thread to remove from Trash. */
        public Untrash setId(string id) {
          this.id = id;
          return this;
        }

      }

    }
  }

}
